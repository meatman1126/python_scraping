{"version":3,"file":"main.js","sources":["../../svelte-app/src/components/Modal.svelte","../../svelte-app/src/components/UserRegisterForm.svelte","../../svelte-app/src/UserRegister.svelte","../../svelte-app/src/userRegister.js"],"sourcesContent":["<script>\n\texport let showModal; // boolean\n\n\tlet dialog; // HTMLDialogElement\n\n\t$: if (dialog && showModal) dialog.showModal();\n\n\tfunction toLoginPage() {\n\t\twindow.location.href = \"/logout\";\n\t}\n</script>\n\n<!-- svelte-ignore a11y-click-events-have-key-events a11y-no-noninteractive-element-interactions -->\n<dialog\n\tbind:this={dialog}\n\ton:close={() => (showModal = false)}\n\ton:click|self={() => dialog.close()}\n>\n\t<!-- svelte-ignore a11y-no-static-element-interactions -->\n\t<div on:click|stopPropagation>\n\t\t<slot name=\"header\" />\n\t\t<!-- <hr />\n\t\t<slot />\n\t\t<hr /> -->\n\t\t<!-- svelte-ignore a11y-autofocus -->\n\t\t<button autofocus on:click={toLoginPage}>OK</button>\n\t</div>\n</dialog>\n\n<style>\n\tdialog {\n\t\tmax-width: 32em;\n\t\tborder-radius: 0.2em;\n\t\tborder: none;\n\t\tpadding: 0;\n\t}\n\tdialog::backdrop {\n\t\tbackground: rgba(0, 0, 0, 0.3);\n\t}\n\tdialog > div {\n\t\tpadding: 1em;\n\t}\n\tdialog[open] {\n\t\tanimation: zoom 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n\t}\n\t@keyframes zoom {\n\t\tfrom {\n\t\t\ttransform: scale(0.95);\n\t\t}\n\t\tto {\n\t\t\ttransform: scale(1);\n\t\t}\n\t}\n\tdialog[open]::backdrop {\n\t\tanimation: fade 0.2s ease-out;\n\t}\n\t@keyframes fade {\n\t\tfrom {\n\t\t\topacity: 0;\n\t\t}\n\t\tto {\n\t\t\topacity: 1;\n\t\t}\n\t}\n\tbutton {\n\t\tdisplay: block;\n\t}\n</style>\n","<script>\n    // import { writable } from \"svelte/store\";\n\n    // export const registered = writable(false);\n    import { registered } from \"./stores.js\";\n    export let register_url;\n    let email = \"\";\n    let password = \"\";\n    let username = \"\";\n    let note = \"\";\n\n    async function handleSubmit(event) {\n        event.preventDefault(); // フォームのデフォルトの送信を防ぎます\n\n        // POSTリクエストの設定\n        const requestOptions = {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                email: email,\n                password: password,\n                username: username,\n                note: note,\n            }),\n        };\n\n        try {\n            const response = await fetch(register_url, requestOptions);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            // 成功した後の処理をここに書く\n            registered.set(true);\n        } catch (error) {\n            console.error(\"Error:\", error);\n        }\n    }\n</script>\n\n<div class=\"registration-container\">\n    <h2>ユーザ登録</h2>\n    <form\n        action={register_url}\n        method=\"post\"\n        id=\"register-form\"\n        on:submit={handleSubmit}\n    >\n        <div class=\"form-group\">\n            <label for=\"email\">メールアドレス</label>\n            <input\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                required\n                bind:value={email}\n            />\n        </div>\n        <div class=\"form-group\">\n            <label for=\"password\">パスワード</label>\n            <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                required\n                bind:value={password}\n            />\n        </div>\n        <div class=\"form-group\">\n            <label for=\"username\">ユーザ名</label>\n            <input\n                type=\"text\"\n                id=\"username\"\n                name=\"username\"\n                required\n                bind:value={username}\n            />\n        </div>\n        <div class=\"form-group\">\n            <label for=\"note\">備考</label>\n            <textarea id=\"note\" name=\"note\" bind:value={note}></textarea>\n        </div>\n        <div class=\"button-group\">\n            <button type=\"submit\" class=\"register-btn\">登録</button>\n            <button type=\"button\" class=\"cancel-btn\">キャンセル</button>\n        </div>\n    </form>\n</div>\n\n<style>\n    .registration-container {\n        background-color: #fff;\n        padding: 20px;\n        border-radius: 5px;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        width: 100%;\n        max-width: 400px;\n    }\n\n    h2 {\n        text-align: center;\n        color: #333;\n    }\n\n    .form-group {\n        margin-bottom: 20px;\n    }\n\n    label {\n        display: block;\n        margin-bottom: 5px;\n    }\n\n    input[type=\"email\"],\n    input[type=\"password\"],\n    input[type=\"text\"],\n    textarea {\n        width: 100%;\n        padding: 10px;\n        margin-bottom: 10px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        box-sizing: border-box; /* 入力フィールドのサイズを調整 */\n    }\n\n    .button-group {\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .register-btn,\n    .cancel-btn {\n        padding: 10px 20px;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n    }\n\n    .register-btn {\n        background-color: #007bff;\n        color: white;\n    }\n\n    .cancel-btn {\n        background-color: #6c757d;\n        color: white;\n    }\n\n    .register-btn:hover {\n        background-color: #0056b3;\n    }\n\n    .cancel-btn:hover {\n        background-color: #545b62;\n    }\n</style>\n","<script>\n\timport Modal from \"./components/Modal.svelte\";\n\timport UserRegisterForm from \"./components/UserRegisterForm.svelte\";\n\timport { registered } from \"./components/stores.js\";\n\n\tlet showModal = false;\n\t$: showModal = $registered;\n</script>\n\n<!-- <button on:click={() => (showModal = true)}> show modal </button> -->\n\n<UserRegisterForm register_url=\"/register\" />\n<Modal bind:showModal>\n\t<h2 slot=\"header\">\n\t\tユーザ登録が完了しました。<br />\n\t\tログイン画面に遷移します。\n\t</h2>\n</Modal>\n","import App from './UserRegister.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n});\n\nexport default app;"],"names":["insert","target","dialog_1","anchor","append","div","button","toLoginPage","window","location","href","dialog","showModal","$$props","$$value","$$invalidate","close","ctx","div5","h2","form","div0","label0","input0","div1","label1","input1","div2","label2","input2","div3","label3","textarea","div4","register_url","email","password","username","note","async","event","preventDefault","requestOptions","method","headers","body","JSON","stringify","response","fetch","ok","Error","status","registered","set","error","console","this","value","$registered","app","document"],"mappings":"wgBAaAA,EAcSC,EAAAC,EAAAC,GARRC,EAOMF,EAAAG,yBADLD,EAAoDC,EAAAC,6CAAxBC,4OAlBpBA,IACRC,OAAOC,SAASC,KAAO,gCALpBC,wCAFOC,GAASC,yHAIbF,GAAUC,GAAWD,EAAOC,4FASxBD,EAAMG,aACA,IAAAC,EAAA,EAAAH,GAAY,GACR,IAAAD,EAAOK,u/CC0BbC,EAAY,gHAH5BjB,EA+CMC,EAAAiB,EAAAf,GA9CFC,EAAcc,EAAAC,UACdf,EA4COc,EAAAE,GAtCHhB,EASMgB,EAAAC,GARFjB,EAAkCiB,EAAAC,UAClClB,EAMEiB,EAAAE,OADcN,EAAK,WAGzBb,EASMgB,EAAAI,GARFpB,EAAmCoB,EAAAC,UACnCrB,EAMEoB,EAAAE,OADcT,EAAQ,WAG5Bb,EASMgB,EAAAO,GARFvB,EAAkCuB,EAAAC,UAClCxB,EAMEuB,EAAAE,OADcZ,EAAQ,WAG5Bb,EAGMgB,EAAAU,GAFF1B,EAA4B0B,EAAAC,UAC5B3B,EAA6D0B,EAAAE,OAAjBf,EAAI,WAEpDb,EAGMgB,EAAAa,+FAvCKhB,EAAY,oCASHA,EAAK,QAALA,EAAK,mBAULA,EAAQ,QAARA,EAAQ,mBAURA,EAAQ,QAARA,EAAQ,cAKoBA,EAAI,sBArC5CA,EAAY,yEArCbiB,GAAYrB,EACnBsB,EAAQ,GACRC,EAAW,GACXC,EAAW,GACXC,EAAO,4EAEIC,eAAaC,GACxBA,EAAMC,uBAGAC,EAAc,CAChBC,OAAQ,OACRC,QAAO,CAAI,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAS,CACTZ,QACGC,WACAC,WACJC,cAKJ,MAAAU,QAAiBC,MAAMf,EAAcQ,GACtC,IAAAM,EAASE,aACAC,MAAK,uBAAwBH,EAASI,UAGpDC,EAAWC,KAAI,SACVC,GACLC,QAAQD,MAAM,SAAUA,gBAoBRpB,EAAKsB,KAAAC,yBAULtB,EAAQqB,KAAAC,yBAURrB,EAAQoB,KAAAC,yBAKoBpB,EAAImB,KAAAC,oNClE3D1D,EAGKC,EAAAkB,EAAAhB,qnBAXD,IAAAS,GAAY,wCACfG,EAAA,EAAEH,EAAY+C,yCCJX,MAACC,EAAM,gEAAQ,CACnB3D,OAAQ4D,SAAShB"}