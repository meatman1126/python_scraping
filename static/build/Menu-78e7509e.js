
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35730/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as compute_rest_props, v as validate_slots, a as assign, e as exclude_internal_props, b as classnames, a2 as backdropIn, a3 as backdropOut, G as empty, l as insert_dev, t as transition_in, n as group_outros, o as transition_out, p as check_outros, q as detach_dev, r as bubble, g as element, C as set_attributes, a4 as toggle_class, k as add_location, D as listen_dev, E as get_spread_update, K as add_render_callback, a5 as create_in_transition, a6 as create_out_transition, f as create_slot, x as update_slot_base, y as get_all_dirty_from_scope, z as get_slot_changes, h as space, j as attr_dev, m as append_dev, A as text, B as set_data_dev, O as noop, a7 as is_function, ak as construct_svelte_component_dev, al as compute_slots, a8 as createEventDispatcher, a1 as onMount, af as InlineContainer, ag as Portal, ac as browserEvent, am as getTransitionDuration, Q as create_component, R as mount_component, T as destroy_component, u as binding_callbacks, X as globals, Y as Button } from './Portal-cdc68c5c.js';

/* node_modules/sveltestrap/src/OffcanvasBackdrop.svelte generated by Svelte v3.59.2 */
const file$4 = "node_modules/sveltestrap/src/OffcanvasBackdrop.svelte";

// (12:0) {#if isOpen}
function create_if_block$3(ctx) {
	let div;
	let div_intro;
	let div_outro;
	let current;
	let mounted;
	let dispose;

	let div_levels = [
		{ role: "presentation" },
		/*$$restProps*/ ctx[3],
		{ class: /*classes*/ ctx[2] }
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			set_attributes(div, div_data);
			toggle_class(div, "fade", /*fade*/ ctx[1]);
			add_location(div, file$4, 12, 2, 354);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			current = true;

			if (!mounted) {
				dispose = listen_dev(div, "click", /*click_handler*/ ctx[5], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ role: "presentation" },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3],
				(!current || dirty & /*classes*/ 4) && { class: /*classes*/ ctx[2] }
			]));

			toggle_class(div, "fade", /*fade*/ ctx[1]);
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!current) return;
				if (div_outro) div_outro.end(1);
				div_intro = create_in_transition(div, backdropIn, {});
				div_intro.start();
			});

			current = true;
		},
		o: function outro(local) {
			if (div_intro) div_intro.invalidate();
			div_outro = create_out_transition(div, backdropOut, {});
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching && div_outro) div_outro.end();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(12:0) {#if isOpen}",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*isOpen*/ ctx[0] && create_if_block$3(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*isOpen*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*isOpen*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let classes;
	const omit_props_names = ["class","isOpen","fade"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('OffcanvasBackdrop', slots, []);
	let { class: className = '' } = $$props;
	let { isOpen = false } = $$props;
	let { fade = true } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ('isOpen' in $$new_props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ('fade' in $$new_props) $$invalidate(1, fade = $$new_props.fade);
	};

	$$self.$capture_state = () => ({
		classnames,
		backdropIn,
		backdropOut,
		className,
		isOpen,
		fade,
		classes
	});

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(4, className = $$new_props.className);
		if ('isOpen' in $$props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ('fade' in $$props) $$invalidate(1, fade = $$new_props.fade);
		if ('classes' in $$props) $$invalidate(2, classes = $$new_props.classes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 16) {
			$$invalidate(2, classes = classnames(className, 'offcanvas-backdrop'));
		}
	};

	return [isOpen, fade, classes, $$restProps, className, click_handler];
}

class OffcanvasBackdrop extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { class: 4, isOpen: 0, fade: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "OffcanvasBackdrop",
			options,
			id: create_fragment$4.name
		});
	}

	get class() {
		throw new Error("<OffcanvasBackdrop>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<OffcanvasBackdrop>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isOpen() {
		throw new Error("<OffcanvasBackdrop>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isOpen(value) {
		throw new Error("<OffcanvasBackdrop>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fade() {
		throw new Error("<OffcanvasBackdrop>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fade(value) {
		throw new Error("<OffcanvasBackdrop>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/OffcanvasBody.svelte generated by Svelte v3.59.2 */
const file$3 = "node_modules/sveltestrap/src/OffcanvasBody.svelte";

function create_fragment$3(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	let div_levels = [/*$$restProps*/ ctx[1], { class: /*classes*/ ctx[0] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			add_location(div, file$3, 9, 0, 169);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1],
				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let classes;
	const omit_props_names = ["class"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('OffcanvasBody', slots, ['default']);
	let { class: className = '' } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({ classnames, className, classes });

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 4) {
			$$invalidate(0, classes = classnames(className, 'offcanvas-body'));
		}
	};

	return [classes, $$restProps, className, $$scope, slots];
}

class OffcanvasBody extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { class: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "OffcanvasBody",
			options,
			id: create_fragment$3.name
		});
	}

	get class() {
		throw new Error("<OffcanvasBody>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<OffcanvasBody>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/OffcanvasHeader.svelte generated by Svelte v3.59.2 */
const file$2 = "node_modules/sveltestrap/src/OffcanvasHeader.svelte";
const get_close_slot_changes = dirty => ({});
const get_close_slot_context = ctx => ({});

// (17:4) {:else}
function create_else_block$1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(17:4) {:else}",
		ctx
	});

	return block;
}

// (15:4) {#if children}
function create_if_block_1$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*children*/ ctx[0]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*children*/ 1) set_data_dev(t, /*children*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$2.name,
		type: "if",
		source: "(15:4) {#if children}",
		ctx
	});

	return block;
}

// (22:4) {#if typeof toggle === 'function'}
function create_if_block$2(ctx) {
	let button;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			attr_dev(button, "aria-label", /*closeAriaLabel*/ ctx[1]);
			attr_dev(button, "class", "btn-close");
			attr_dev(button, "type", "button");
			add_location(button, file$2, 22, 6, 496);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);

			if (!mounted) {
				dispose = listen_dev(
					button,
					"click",
					function () {
						if (is_function(/*toggle*/ ctx[2])) /*toggle*/ ctx[2].apply(this, arguments);
					},
					false,
					false,
					false,
					false
				);

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*closeAriaLabel*/ 2) {
				attr_dev(button, "aria-label", /*closeAriaLabel*/ ctx[1]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(22:4) {#if typeof toggle === 'function'}",
		ctx
	});

	return block;
}

// (21:21)      
function fallback_block(ctx) {
	let if_block_anchor;
	let if_block = typeof /*toggle*/ ctx[2] === 'function' && create_if_block$2(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (typeof /*toggle*/ ctx[2] === 'function') {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(21:21)      ",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div;
	let h5;
	let current_block_type_index;
	let if_block;
	let t;
	let current;
	const if_block_creators = [create_if_block_1$2, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*children*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const close_slot_template = /*#slots*/ ctx[7].close;
	const close_slot = create_slot(close_slot_template, ctx, /*$$scope*/ ctx[6], get_close_slot_context);
	const close_slot_or_fallback = close_slot || fallback_block(ctx);
	let div_levels = [/*$$restProps*/ ctx[4], { class: /*classes*/ ctx[3] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			h5 = element("h5");
			if_block.c();
			t = space();
			if (close_slot_or_fallback) close_slot_or_fallback.c();
			attr_dev(h5, "class", "offcanvas-title");
			add_location(h5, file$2, 13, 2, 319);
			set_attributes(div, div_data);
			add_location(div, file$2, 12, 0, 278);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h5);
			if_blocks[current_block_type_index].m(h5, null);
			append_dev(div, t);

			if (close_slot_or_fallback) {
				close_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(h5, null);
			}

			if (close_slot) {
				if (close_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						close_slot,
						close_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(close_slot_template, /*$$scope*/ ctx[6], dirty, get_close_slot_changes),
						get_close_slot_context
					);
				}
			} else {
				if (close_slot_or_fallback && close_slot_or_fallback.p && (!current || dirty & /*closeAriaLabel, toggle*/ 6)) {
					close_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4],
				(!current || dirty & /*classes*/ 8) && { class: /*classes*/ ctx[3] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(close_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(close_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_blocks[current_block_type_index].d();
			if (close_slot_or_fallback) close_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let classes;
	const omit_props_names = ["class","children","closeAriaLabel","toggle"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('OffcanvasHeader', slots, ['default','close']);
	let { class: className = '' } = $$props;
	let { children = undefined } = $$props;
	let { closeAriaLabel = 'Close' } = $$props;
	let { toggle = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ('children' in $$new_props) $$invalidate(0, children = $$new_props.children);
		if ('closeAriaLabel' in $$new_props) $$invalidate(1, closeAriaLabel = $$new_props.closeAriaLabel);
		if ('toggle' in $$new_props) $$invalidate(2, toggle = $$new_props.toggle);
		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		classnames,
		className,
		children,
		closeAriaLabel,
		toggle,
		classes
	});

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(5, className = $$new_props.className);
		if ('children' in $$props) $$invalidate(0, children = $$new_props.children);
		if ('closeAriaLabel' in $$props) $$invalidate(1, closeAriaLabel = $$new_props.closeAriaLabel);
		if ('toggle' in $$props) $$invalidate(2, toggle = $$new_props.toggle);
		if ('classes' in $$props) $$invalidate(3, classes = $$new_props.classes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 32) {
			$$invalidate(3, classes = classnames(className, 'offcanvas-header'));
		}
	};

	return [
		children,
		closeAriaLabel,
		toggle,
		classes,
		$$restProps,
		className,
		$$scope,
		slots
	];
}

class OffcanvasHeader extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			class: 5,
			children: 0,
			closeAriaLabel: 1,
			toggle: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "OffcanvasHeader",
			options,
			id: create_fragment$2.name
		});
	}

	get class() {
		throw new Error("<OffcanvasHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<OffcanvasHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get children() {
		throw new Error("<OffcanvasHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set children(value) {
		throw new Error("<OffcanvasHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get closeAriaLabel() {
		throw new Error("<OffcanvasHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set closeAriaLabel(value) {
		throw new Error("<OffcanvasHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get toggle() {
		throw new Error("<OffcanvasHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set toggle(value) {
		throw new Error("<OffcanvasHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/Offcanvas.svelte generated by Svelte v3.59.2 */

const { document: document_1 } = globals;
const file$1 = "node_modules/sveltestrap/src/Offcanvas.svelte";
const get_header_slot_changes = dirty => ({});
const get_header_slot_context = ctx => ({});

// (106:4) {#if toggle || header || $$slots.header}
function create_if_block_2(ctx) {
	let offcanvasheader;
	let current;

	offcanvasheader = new OffcanvasHeader({
			props: {
				toggle: /*toggle*/ ctx[6],
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(offcanvasheader.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(offcanvasheader, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const offcanvasheader_changes = {};
			if (dirty & /*toggle*/ 64) offcanvasheader_changes.toggle = /*toggle*/ ctx[6];

			if (dirty & /*$$scope, header*/ 268435472) {
				offcanvasheader_changes.$$scope = { dirty, ctx };
			}

			offcanvasheader.$set(offcanvasheader_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(offcanvasheader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(offcanvasheader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(offcanvasheader, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(106:4) {#if toggle || header || $$slots.header}",
		ctx
	});

	return block;
}

// (108:8) {#if header}
function create_if_block_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*header*/ ctx[4]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*header*/ 16) set_data_dev(t, /*header*/ ctx[4]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(108:8) {#if header}",
		ctx
	});

	return block;
}

// (107:6) <OffcanvasHeader {toggle}>
function create_default_slot_2(ctx) {
	let t;
	let current;
	let if_block = /*header*/ ctx[4] && create_if_block_3(ctx);
	const header_slot_template = /*#slots*/ ctx[25].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[28], get_header_slot_context);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t = space();
			if (header_slot) header_slot.c();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t, anchor);

			if (header_slot) {
				header_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*header*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (header_slot) {
				if (header_slot.p && (!current || dirty & /*$$scope*/ 268435456)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[28],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[28])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[28], dirty, get_header_slot_changes),
						get_header_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t);
			if (header_slot) header_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(107:6) <OffcanvasHeader {toggle}>",
		ctx
	});

	return block;
}

// (116:4) {:else}
function create_else_block(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[25].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[28], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 268435456)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[28],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[28])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[28], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(116:4) {:else}",
		ctx
	});

	return block;
}

// (112:4) {#if body}
function create_if_block_1$1(ctx) {
	let offcanvasbody;
	let current;

	offcanvasbody = new OffcanvasBody({
			props: {
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(offcanvasbody.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(offcanvasbody, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const offcanvasbody_changes = {};

			if (dirty & /*$$scope*/ 268435456) {
				offcanvasbody_changes.$$scope = { dirty, ctx };
			}

			offcanvasbody.$set(offcanvasbody_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(offcanvasbody.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(offcanvasbody.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(offcanvasbody, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(112:4) {#if body}",
		ctx
	});

	return block;
}

// (113:6) <OffcanvasBody>
function create_default_slot_1$1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[25].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[28], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 268435456)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[28],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[28])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[28], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(113:6) <OffcanvasBody>",
		ctx
	});

	return block;
}

// (120:2) {#if backdrop}
function create_if_block$1(ctx) {
	let offcanvasbackdrop;
	let current;

	offcanvasbackdrop = new OffcanvasBackdrop({
			props: {
				fade: /*fade*/ ctx[3],
				isOpen: /*isOpen*/ ctx[0]
			},
			$$inline: true
		});

	offcanvasbackdrop.$on("click", function () {
		if (is_function(/*toggle*/ ctx[6]
		? /*click_handler*/ ctx[27]
		: undefined)) (/*toggle*/ ctx[6]
		? /*click_handler*/ ctx[27]
		: undefined).apply(this, arguments);
	});

	const block = {
		c: function create() {
			create_component(offcanvasbackdrop.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(offcanvasbackdrop, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const offcanvasbackdrop_changes = {};
			if (dirty & /*fade*/ 8) offcanvasbackdrop_changes.fade = /*fade*/ ctx[3];
			if (dirty & /*isOpen*/ 1) offcanvasbackdrop_changes.isOpen = /*isOpen*/ ctx[0];
			offcanvasbackdrop.$set(offcanvasbackdrop_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(offcanvasbackdrop.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(offcanvasbackdrop.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(offcanvasbackdrop, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(120:2) {#if backdrop}",
		ctx
	});

	return block;
}

// (93:0) <svelte:component this={outer}>
function create_default_slot$1(ctx) {
	let div;
	let t0;
	let current_block_type_index;
	let if_block1;
	let div_aria_hidden_value;
	let div_aria_modal_value;
	let div_role_value;
	let div_style_value;
	let t1;
	let if_block2_anchor;
	let current;
	let if_block0 = (/*toggle*/ ctx[6] || /*header*/ ctx[4] || /*$$slots*/ ctx[13].header) && create_if_block_2(ctx);
	const if_block_creators = [create_if_block_1$1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*body*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	let div_levels = [
		/*$$restProps*/ ctx[12],
		{
			"aria-hidden": div_aria_hidden_value = !/*isOpen*/ ctx[0] ? true : undefined
		},
		{
			"aria-modal": div_aria_modal_value = /*isOpen*/ ctx[0] ? true : undefined
		},
		{ class: /*classes*/ ctx[10] },
		{
			role: div_role_value = /*isOpen*/ ctx[0] || /*isTransitioning*/ ctx[7]
			? 'dialog'
			: undefined
		},
		{
			style: div_style_value = `visibility: ${/*isOpen*/ ctx[0] || /*isTransitioning*/ ctx[7]
			? 'visible'
			: 'hidden'};${/*style*/ ctx[5]}`
		},
		{ tabindex: "-1" }
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	let if_block2 = /*backdrop*/ ctx[1] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			set_attributes(div, div_data);
			add_location(div, file$1, 93, 2, 2592);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t0);
			if_blocks[current_block_type_index].m(div, null);
			/*div_binding*/ ctx[26](div);
			insert_dev(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, if_block2_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*toggle*/ ctx[6] || /*header*/ ctx[4] || /*$$slots*/ ctx[13].header) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*toggle, header, $$slots*/ 8272) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(div, null);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12],
				(!current || dirty & /*isOpen*/ 1 && div_aria_hidden_value !== (div_aria_hidden_value = !/*isOpen*/ ctx[0] ? true : undefined)) && { "aria-hidden": div_aria_hidden_value },
				(!current || dirty & /*isOpen*/ 1 && div_aria_modal_value !== (div_aria_modal_value = /*isOpen*/ ctx[0] ? true : undefined)) && { "aria-modal": div_aria_modal_value },
				(!current || dirty & /*classes*/ 1024) && { class: /*classes*/ ctx[10] },
				(!current || dirty & /*isOpen, isTransitioning*/ 129 && div_role_value !== (div_role_value = /*isOpen*/ ctx[0] || /*isTransitioning*/ ctx[7]
				? 'dialog'
				: undefined)) && { role: div_role_value },
				(!current || dirty & /*isOpen, isTransitioning, style*/ 161 && div_style_value !== (div_style_value = `visibility: ${/*isOpen*/ ctx[0] || /*isTransitioning*/ ctx[7]
				? 'visible'
				: 'hidden'};${/*style*/ ctx[5]}`)) && { style: div_style_value },
				{ tabindex: "-1" }
			]));

			if (/*backdrop*/ ctx[1]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*backdrop*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block0) if_block0.d();
			if_blocks[current_block_type_index].d();
			/*div_binding*/ ctx[26](null);
			if (detaching) detach_dev(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(if_block2_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(93:0) <svelte:component this={outer}>",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t;
	let switch_instance;
	let switch_instance_anchor;
	let current;
	let mounted;
	let dispose;
	var switch_value = /*outer*/ ctx[9];

	function switch_props(ctx) {
		return {
			props: {
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
	}

	const block = {
		c: function create() {
			t = space();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			if (switch_instance) mount_component(switch_instance, target, anchor);
			insert_dev(target, switch_instance_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = listen_dev(
					document_1.body,
					"mousedown",
					function () {
						if (is_function(/*handleMouseDown*/ ctx[11])) /*handleMouseDown*/ ctx[11].apply(this, arguments);
					},
					false,
					false,
					false,
					false
				);

				mounted = true;
			}
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;
			const switch_instance_changes = {};

			if (dirty & /*$$scope, fade, isOpen, toggle, backdrop, $$restProps, classes, isTransitioning, style, element, body, header, $$slots*/ 268449279) {
				switch_instance_changes.$$scope = { dirty, ctx };
			}

			if (dirty & /*outer*/ 512 && switch_value !== (switch_value = /*outer*/ ctx[9])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let handleMouseDown;
	let classes;
	let outer;

	const omit_props_names = [
		"class","backdrop","body","container","fade","header","isOpen","placement","scroll","sm","md","lg","xl","xxl","style","toggle"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Offcanvas', slots, ['header','default']);
	const $$slots = compute_slots(slots);
	const dispatch = createEventDispatcher();
	let { class: className = '' } = $$props;
	let { backdrop = true } = $$props;
	let { body = true } = $$props;
	let { container = 'body' } = $$props;
	let { fade = true } = $$props;
	let { header = undefined } = $$props;
	let { isOpen = false } = $$props;
	let { placement = 'start' } = $$props;
	let { scroll = false } = $$props;
	let { sm = false } = $$props;
	let { md = false } = $$props;
	let { lg = false } = $$props;
	let { xl = false } = $$props;
	let { xxl = false } = $$props;
	let { style = '' } = $$props;
	let { toggle = undefined } = $$props;

	// TODO support these like Modals:
	// export let autoFocus = true;
	// export let unmountOnClose = true;
	// TODO focus trap
	let bodyElement;

	let isTransitioning = false;
	let element;
	let removeEscListener;
	onMount(() => $$invalidate(23, bodyElement = document.body));

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(8, element);
		});
	}

	const click_handler = () => toggle();

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(14, className = $$new_props.class);
		if ('backdrop' in $$new_props) $$invalidate(1, backdrop = $$new_props.backdrop);
		if ('body' in $$new_props) $$invalidate(2, body = $$new_props.body);
		if ('container' in $$new_props) $$invalidate(15, container = $$new_props.container);
		if ('fade' in $$new_props) $$invalidate(3, fade = $$new_props.fade);
		if ('header' in $$new_props) $$invalidate(4, header = $$new_props.header);
		if ('isOpen' in $$new_props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ('placement' in $$new_props) $$invalidate(16, placement = $$new_props.placement);
		if ('scroll' in $$new_props) $$invalidate(17, scroll = $$new_props.scroll);
		if ('sm' in $$new_props) $$invalidate(18, sm = $$new_props.sm);
		if ('md' in $$new_props) $$invalidate(19, md = $$new_props.md);
		if ('lg' in $$new_props) $$invalidate(20, lg = $$new_props.lg);
		if ('xl' in $$new_props) $$invalidate(21, xl = $$new_props.xl);
		if ('xxl' in $$new_props) $$invalidate(22, xxl = $$new_props.xxl);
		if ('style' in $$new_props) $$invalidate(5, style = $$new_props.style);
		if ('toggle' in $$new_props) $$invalidate(6, toggle = $$new_props.toggle);
		if ('$$scope' in $$new_props) $$invalidate(28, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		onMount,
		InlineContainer,
		OffcanvasBackdrop,
		OffcanvasBody,
		OffcanvasHeader,
		Portal,
		classnames,
		browserEvent,
		getTransitionDuration,
		dispatch,
		className,
		backdrop,
		body,
		container,
		fade,
		header,
		isOpen,
		placement,
		scroll,
		sm,
		md,
		lg,
		xl,
		xxl,
		style,
		toggle,
		bodyElement,
		isTransitioning,
		element,
		removeEscListener,
		outer,
		classes,
		handleMouseDown
	});

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(14, className = $$new_props.className);
		if ('backdrop' in $$props) $$invalidate(1, backdrop = $$new_props.backdrop);
		if ('body' in $$props) $$invalidate(2, body = $$new_props.body);
		if ('container' in $$props) $$invalidate(15, container = $$new_props.container);
		if ('fade' in $$props) $$invalidate(3, fade = $$new_props.fade);
		if ('header' in $$props) $$invalidate(4, header = $$new_props.header);
		if ('isOpen' in $$props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ('placement' in $$props) $$invalidate(16, placement = $$new_props.placement);
		if ('scroll' in $$props) $$invalidate(17, scroll = $$new_props.scroll);
		if ('sm' in $$props) $$invalidate(18, sm = $$new_props.sm);
		if ('md' in $$props) $$invalidate(19, md = $$new_props.md);
		if ('lg' in $$props) $$invalidate(20, lg = $$new_props.lg);
		if ('xl' in $$props) $$invalidate(21, xl = $$new_props.xl);
		if ('xxl' in $$props) $$invalidate(22, xxl = $$new_props.xxl);
		if ('style' in $$props) $$invalidate(5, style = $$new_props.style);
		if ('toggle' in $$props) $$invalidate(6, toggle = $$new_props.toggle);
		if ('bodyElement' in $$props) $$invalidate(23, bodyElement = $$new_props.bodyElement);
		if ('isTransitioning' in $$props) $$invalidate(7, isTransitioning = $$new_props.isTransitioning);
		if ('element' in $$props) $$invalidate(8, element = $$new_props.element);
		if ('removeEscListener' in $$props) $$invalidate(24, removeEscListener = $$new_props.removeEscListener);
		if ('outer' in $$props) $$invalidate(9, outer = $$new_props.outer);
		if ('classes' in $$props) $$invalidate(10, classes = $$new_props.classes);
		if ('handleMouseDown' in $$props) $$invalidate(11, handleMouseDown = $$new_props.handleMouseDown);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*element, isOpen*/ 257) {
			if (element) {
				($$invalidate(0, isOpen), $$invalidate(8, element)); // Used to trigger reactive on isOpen changes.
				$$invalidate(7, isTransitioning = true);
				dispatch(isOpen ? 'opening' : 'closing');

				setTimeout(
					() => {
						$$invalidate(7, isTransitioning = false);
						dispatch(isOpen ? 'open' : 'close');
					},
					getTransitionDuration(element)
				);
			}
		}

		if ($$self.$$.dirty & /*bodyElement, scroll, isOpen, isTransitioning*/ 8519809) {
			if (bodyElement) {
				if (!scroll) {
					bodyElement.classList.toggle('overflow-noscroll', isOpen || isTransitioning);
				}
			}
		}

		if ($$self.$$.dirty & /*isOpen, toggle*/ 65) {
			if (isOpen && toggle && typeof window !== 'undefined') {
				$$invalidate(24, removeEscListener = browserEvent(document, 'keydown', event => {
					if (event.key && event.key === 'Escape') toggle();
				}));
			}
		}

		if ($$self.$$.dirty & /*isOpen, removeEscListener*/ 16777217) {
			if (!isOpen && removeEscListener) {
				removeEscListener();
			}
		}

		if ($$self.$$.dirty & /*backdrop, toggle, bodyElement, isOpen*/ 8388675) {
			$$invalidate(11, handleMouseDown = backdrop && toggle && bodyElement && isOpen
			? e => {
					if (e.target === bodyElement) {
						toggle();
					}
				}
			: undefined);
		}

		if ($$self.$$.dirty & /*sm, md, lg, xl, xxl, isOpen, placement, className*/ 8208385) {
			$$invalidate(10, classes = classnames(
				{
					offcanvas: !sm && !md && !lg && !xl && !xxl,
					'offcanvas-sm': sm,
					'offcanvas-md': md,
					'offcanvas-lg': lg,
					'offcanvas-xl': xl,
					'offcanvas-xxl': xxl,
					show: isOpen
				},
				`offcanvas-${placement}`,
				className
			));
		}

		if ($$self.$$.dirty & /*container*/ 32768) {
			$$invalidate(9, outer = container === 'inline' ? InlineContainer : Portal);
		}
	};

	return [
		isOpen,
		backdrop,
		body,
		fade,
		header,
		style,
		toggle,
		isTransitioning,
		element,
		outer,
		classes,
		handleMouseDown,
		$$restProps,
		$$slots,
		className,
		container,
		placement,
		scroll,
		sm,
		md,
		lg,
		xl,
		xxl,
		bodyElement,
		removeEscListener,
		slots,
		div_binding,
		click_handler,
		$$scope
	];
}

class Offcanvas extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			class: 14,
			backdrop: 1,
			body: 2,
			container: 15,
			fade: 3,
			header: 4,
			isOpen: 0,
			placement: 16,
			scroll: 17,
			sm: 18,
			md: 19,
			lg: 20,
			xl: 21,
			xxl: 22,
			style: 5,
			toggle: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Offcanvas",
			options,
			id: create_fragment$1.name
		});
	}

	get class() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get backdrop() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set backdrop(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get body() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set body(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get container() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set container(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fade() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fade(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get header() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set header(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isOpen() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isOpen(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get placement() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placement(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get scroll() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scroll(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get sm() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sm(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get md() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set md(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get lg() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lg(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xl() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xl(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xxl() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xxl(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get toggle() {
		throw new Error("<Offcanvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set toggle(value) {
		throw new Error("<Offcanvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Menu.svelte generated by Svelte v3.59.2 */

const { console: console_1 } = globals;
const file = "src/components/Menu.svelte";

// (22:0) <Button color="light" on:click={toggle} size="lg">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("☰");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(22:0) <Button color=\\\"light\\\" on:click={toggle} size=\\\"lg\\\">",
		ctx
	});

	return block;
}

// (25:8) {#if isLoaded}
function create_if_block(ctx) {
	let a0;
	let t1;
	let show_if = /*hasRole*/ ctx[2]("Admin");
	let t2;
	let a1;
	let if_block = show_if && create_if_block_1(ctx);

	const block = {
		c: function create() {
			a0 = element("a");
			a0.textContent = "ポートフォリオ一覧";
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			a1 = element("a");
			a1.textContent = "ログアウト";
			attr_dev(a0, "href", "/index");
			attr_dev(a0, "class", "list-group-item list-group-item-action");
			add_location(a0, file, 25, 12, 764);
			attr_dev(a1, "href", "/logout");
			attr_dev(a1, "class", "list-group-item list-group-item-action");
			add_location(a1, file, 35, 12, 1110);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a0, anchor);
			insert_dev(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, a1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(a0);
			if (detaching) detach_dev(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(a1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(25:8) {#if isLoaded}",
		ctx
	});

	return block;
}

// (29:12) {#if hasRole("Admin")}
function create_if_block_1(ctx) {
	let a;

	const block = {
		c: function create() {
			a = element("a");
			a.textContent = "ユーザ新規登録";
			attr_dev(a, "href", "/register");
			attr_dev(a, "class", "list-group-item list-group-item-action");
			add_location(a, file, 29, 16, 923);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(29:12) {#if hasRole(\\\"Admin\\\")}",
		ctx
	});

	return block;
}

// (23:0) <Offcanvas theme="light" {isOpen} {toggle} header="Link" placement="start">
function create_default_slot(ctx) {
	let div;
	let if_block = /*isLoaded*/ ctx[1] && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			attr_dev(div, "class", "list-group");
			add_location(div, file, 23, 4, 704);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
		},
		p: function update(ctx, dirty) {
			if (/*isLoaded*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(23:0) <Offcanvas theme=\\\"light\\\" {isOpen} {toggle} header=\\\"Link\\\" placement=\\\"start\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let button;
	let t;
	let offcanvas;
	let current;

	button = new Button({
			props: {
				color: "light",
				size: "lg",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*toggle*/ ctx[3]);

	offcanvas = new Offcanvas({
			props: {
				theme: "light",
				isOpen: /*isOpen*/ ctx[0],
				toggle: /*toggle*/ ctx[3],
				header: "Link",
				placement: "start",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
			t = space();
			create_component(offcanvas.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(offcanvas, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 32) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const offcanvas_changes = {};
			if (dirty & /*isOpen*/ 1) offcanvas_changes.isOpen = /*isOpen*/ ctx[0];

			if (dirty & /*$$scope, isLoaded*/ 34) {
				offcanvas_changes.$$scope = { dirty, ctx };
			}

			offcanvas.$set(offcanvas_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(offcanvas.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(offcanvas.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach_dev(t);
			destroy_component(offcanvas, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Menu', slots, []);
	let isOpen = false;
	let userRoles = [];
	let isLoaded = false;

	onMount(async () => {
		const res = await fetch("/api/get-user-roles");
		console.log(res);
		userRoles = await res.json();
		console.log(userRoles);
		console.log(hasRole("Admin"));
		$$invalidate(1, isLoaded = true);
	});

	const hasRole = role => userRoles.includes(role);

	const toggle = event => {
		$$invalidate(0, isOpen = !isOpen);
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Menu> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		onMount,
		Button,
		Offcanvas,
		isOpen,
		userRoles,
		isLoaded,
		hasRole,
		toggle
	});

	$$self.$inject_state = $$props => {
		if ('isOpen' in $$props) $$invalidate(0, isOpen = $$props.isOpen);
		if ('userRoles' in $$props) userRoles = $$props.userRoles;
		if ('isLoaded' in $$props) $$invalidate(1, isLoaded = $$props.isLoaded);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [isOpen, isLoaded, hasRole, toggle];
}

class Menu extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Menu",
			options,
			id: create_fragment.name
		});
	}
}

export { Menu as M };
//# sourceMappingURL=Menu-78e7509e.js.map
