
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35730/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, W as globals, P as create_component, g as space, f as element, z as text, h as attr_dev, j as add_location, Z as set_style, Q as mount_component, k as insert_dev, l as append_dev, C as listen_dev, A as set_data_dev, t as transition_in, n as transition_out, R as destroy_component, p as detach_dev, E as run_all, r as binding_callbacks, N as noop, _ as src_url_equal } from './index-c8de33e2.js';
import { B as Button } from './Portal-ea51b76c.js';
import { M as Modal, a as ModalBody, b as ModalHeader } from './Modal-f1a12ead.js';
import { M as Menu } from './Menu-b6c2090d.js';
import { S as Spinner_1 } from './Spinner-15c1d8f6.js';
import { i as isLoading } from './stores-8fdee0f1.js';

/* src/Scraping.svelte generated by Svelte v3.59.2 */

const { console: console_1 } = globals;
const file = "src/Scraping.svelte";

// (90:2) <Button type="submit" outline color="light">
function create_default_slot_7(ctx) {
	let t;
	let i;

	const block = {
		c: function create() {
			t = text("企業情報を取得する ");
			i = element("i");
			attr_dev(i, "class", "fa fa-upload ml-2");
			add_location(i, file, 90, 13, 2386);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, i, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(i);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(90:2) <Button type=\\\"submit\\\" outline color=\\\"light\\\">",
		ctx
	});

	return block;
}

// (93:2) <Button type="button" color="light" on:click={toggleExplanationModal}    >
function create_default_slot_6(ctx) {
	let t;
	let i;

	const block = {
		c: function create() {
			t = text("使い方がわからない方へ ");
			i = element("i");
			attr_dev(i, "class", "fa fa-question-circle ml-2");
			add_location(i, file, 93, 16, 2520);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, i, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(i);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(93:2) <Button type=\\\"button\\\" color=\\\"light\\\" on:click={toggleExplanationModal}    >",
		ctx
	});

	return block;
}

// (102:3) <ModalHeader toggle={toggleExplanationModal}     >
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("企業情報リスト取得機能の使い方");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(102:3) <ModalHeader toggle={toggleExplanationModal}     >",
		ctx
	});

	return block;
}

// (138:4) <Button color="primary" on:click={toggleExplanationModal}      >
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("閉じる");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(138:4) <Button color=\\\"primary\\\" on:click={toggleExplanationModal}      >",
		ctx
	});

	return block;
}

// (105:3) <ModalBody class="modal-body">
function create_default_slot_3(ctx) {
	let ul;
	let li0;
	let h50;
	let t1;
	let p;
	let t3;
	let li1;
	let h51;
	let t5;
	let img0;
	let img0_src_value;
	let t6;
	let li2;
	let h52;
	let t8;
	let img1;
	let img1_src_value;
	let t9;
	let button;
	let current;
	let mounted;
	let dispose;

	button = new Button({
			props: {
				color: "primary",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*toggleExplanationModal*/ ctx[5]);

	const block = {
		c: function create() {
			ul = element("ul");
			li0 = element("li");
			h50 = element("h5");
			h50.textContent = "概要の説明";
			t1 = space();
			p = element("p");
			p.textContent = "調査対象の企業名が列挙されたCSVファイルをアップロードすることで、企業のホームページのURLが格納されたCSVファイルをダウンロードすることができます。";
			t3 = space();
			li1 = element("li");
			h51 = element("h5");
			h51.textContent = "アップロードするCSVファイルのサンプル";
			t5 = space();
			img0 = element("img");
			t6 = space();
			li2 = element("li");
			h52 = element("h5");
			h52.textContent = "ダウンロードされるファイルのサンプル";
			t8 = space();
			img1 = element("img");
			t9 = space();
			create_component(button.$$.fragment);
			add_location(h50, file, 107, 6, 2834);
			add_location(p, file, 108, 6, 2855);
			attr_dev(li0, "class", "item svelte-npxw62");
			add_location(li0, file, 106, 5, 2810);
			add_location(h51, file, 113, 6, 2995);
			if (!src_url_equal(img0.src, img0_src_value = "/static/images/upload_csv.png")) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "alt", "アップロードCSVサンプル");
			attr_dev(img0, "class", "svelte-npxw62");
			add_location(img0, file, 115, 6, 3094);
			attr_dev(li1, "class", "item svelte-npxw62");
			add_location(li1, file, 112, 5, 2971);
			add_location(h52, file, 125, 6, 3320);
			if (!src_url_equal(img1.src, img1_src_value = "/static/images/download_csv.png")) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", "ダウンロードCSVサンプル");
			attr_dev(img1, "class", "svelte-npxw62");
			add_location(img1, file, 127, 6, 3417);
			attr_dev(li2, "class", "item svelte-npxw62");
			add_location(li2, file, 124, 5, 3296);
			add_location(ul, file, 105, 4, 2800);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);
			append_dev(ul, li0);
			append_dev(li0, h50);
			append_dev(li0, t1);
			append_dev(li0, p);
			append_dev(ul, t3);
			append_dev(ul, li1);
			append_dev(li1, h51);
			append_dev(li1, t5);
			append_dev(li1, img0);
			append_dev(ul, t6);
			append_dev(ul, li2);
			append_dev(li2, h52);
			append_dev(li2, t8);
			append_dev(li2, img1);
			insert_dev(target, t9, anchor);
			mount_component(button, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(img0, "click", /*click_handler*/ ctx[10], false, false, false, false),
					listen_dev(img1, "click", /*click_handler_1*/ ctx[11], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 16384) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			if (detaching) detach_dev(t9);
			destroy_component(button, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(105:3) <ModalBody class=\\\"modal-body\\\">",
		ctx
	});

	return block;
}

// (97:2) <Modal    isOpen={isExplanationModalOpen}    toggle={toggleExplanationModal}    size="lg"   >
function create_default_slot_2(ctx) {
	let modalheader;
	let t;
	let modalbody;
	let current;

	modalheader = new ModalHeader({
			props: {
				toggle: /*toggleExplanationModal*/ ctx[5],
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	modalbody = new ModalBody({
			props: {
				class: "modal-body",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(modalheader.$$.fragment);
			t = space();
			create_component(modalbody.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(modalheader, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(modalbody, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const modalheader_changes = {};

			if (dirty & /*$$scope*/ 16384) {
				modalheader_changes.$$scope = { dirty, ctx };
			}

			modalheader.$set(modalheader_changes);
			const modalbody_changes = {};

			if (dirty & /*$$scope*/ 16384) {
				modalbody_changes.$$scope = { dirty, ctx };
			}

			modalbody.$set(modalbody_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(modalheader.$$.fragment, local);
			transition_in(modalbody.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(modalheader.$$.fragment, local);
			transition_out(modalbody.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(modalheader, detaching);
			if (detaching) detach_dev(t);
			destroy_component(modalbody, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(97:2) <Modal    isOpen={isExplanationModalOpen}    toggle={toggleExplanationModal}    size=\\\"lg\\\"   >",
		ctx
	});

	return block;
}

// (148:3) <ModalBody>
function create_default_slot_1(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			if (!src_url_equal(img.src, img_src_value = /*selectedImageURL*/ ctx[2])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Expanded");
			attr_dev(img, "class", "img-fluid svelte-npxw62");
			add_location(img, file, 148, 4, 3860);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*selectedImageURL*/ 4 && !src_url_equal(img.src, img_src_value = /*selectedImageURL*/ ctx[2])) {
				attr_dev(img, "src", img_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(148:3) <ModalBody>",
		ctx
	});

	return block;
}

// (143:2) <Modal    isOpen={isImageModalOpen}    toggle={() => (isImageModalOpen = false)}    size="xl"   >
function create_default_slot(ctx) {
	let modalbody;
	let current;

	modalbody = new ModalBody({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(modalbody.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(modalbody, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const modalbody_changes = {};

			if (dirty & /*$$scope, selectedImageURL*/ 16388) {
				modalbody_changes.$$scope = { dirty, ctx };
			}

			modalbody.$set(modalbody_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(modalbody.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(modalbody.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(modalbody, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(143:2) <Modal    isOpen={isImageModalOpen}    toggle={() => (isImageModalOpen = false)}    size=\\\"xl\\\"   >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let spinner;
	let t0;
	let form;
	let div2;
	let div0;
	let menu;
	let t1;
	let h1;
	let t3;
	let div1;
	let label;
	let i;
	let t4;
	let span0;
	let t6;
	let span1;
	let t7;
	let t8;
	let input;
	let t9;
	let button0;
	let t10;
	let button1;
	let t11;
	let modal0;
	let t12;
	let modal1;
	let current;
	let mounted;
	let dispose;
	spinner = new Spinner_1({ $$inline: true });
	menu = new Menu({ $$inline: true });

	button0 = new Button({
			props: {
				type: "submit",
				outline: true,
				color: "light",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1 = new Button({
			props: {
				type: "button",
				color: "light",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1.$on("click", /*toggleExplanationModal*/ ctx[5]);

	modal0 = new Modal({
			props: {
				isOpen: /*isExplanationModalOpen*/ ctx[0],
				toggle: /*toggleExplanationModal*/ ctx[5],
				size: "lg",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	modal1 = new Modal({
			props: {
				isOpen: /*isImageModalOpen*/ ctx[1],
				toggle: /*func*/ ctx[12],
				size: "xl",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(spinner.$$.fragment);
			t0 = space();
			form = element("form");
			div2 = element("div");
			div0 = element("div");
			create_component(menu.$$.fragment);
			t1 = space();
			h1 = element("h1");
			h1.textContent = "企業名リストCSVファイルをアップロードしてください";
			t3 = space();
			div1 = element("div");
			label = element("label");
			i = element("i");
			t4 = space();
			span0 = element("span");
			span0.textContent = "ファイルを選択";
			t6 = space();
			span1 = element("span");
			t7 = text(/*selectedFileName*/ ctx[3]);
			t8 = space();
			input = element("input");
			t9 = space();
			create_component(button0.$$.fragment);
			t10 = space();
			create_component(button1.$$.fragment);
			t11 = space();
			create_component(modal0.$$.fragment);
			t12 = space();
			create_component(modal1.$$.fragment);
			attr_dev(div0, "class", "menu-area svelte-npxw62");
			add_location(div0, file, 66, 2, 1790);
			attr_dev(h1, "class", "text-light");
			add_location(h1, file, 69, 2, 1837);
			attr_dev(i, "class", "fa fa-cloud-upload-alt fa-3x");
			add_location(i, file, 74, 4, 1972);
			attr_dev(span0, "class", "mt-2");
			add_location(span0, file, 75, 4, 2021);
			attr_dev(span1, "class", "mt-2 border-bottom");
			add_location(span1, file, 76, 4, 2059);
			attr_dev(input, "type", "file");
			attr_dev(input, "id", "fileUpload");
			attr_dev(input, "name", "fileUpload");
			set_style(input, "display", "none");
			attr_dev(input, "accept", ".csv");
			add_location(input, file, 77, 4, 2122);
			attr_dev(label, "class", "upload-container svelte-npxw62");
			add_location(label, file, 73, 3, 1935);
			attr_dev(div1, "class", "upload-container svelte-npxw62");
			add_location(div1, file, 72, 2, 1901);
			attr_dev(div2, "class", "screen svelte-npxw62");
			add_location(div2, file, 65, 1, 1767);
			add_location(form, file, 64, 0, 1734);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(spinner, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, form, anchor);
			append_dev(form, div2);
			append_dev(div2, div0);
			mount_component(menu, div0, null);
			append_dev(div2, t1);
			append_dev(div2, h1);
			append_dev(div2, t3);
			append_dev(div2, div1);
			append_dev(div1, label);
			append_dev(label, i);
			append_dev(label, t4);
			append_dev(label, span0);
			append_dev(label, t6);
			append_dev(label, span1);
			append_dev(span1, t7);
			append_dev(label, t8);
			append_dev(label, input);
			/*input_binding*/ ctx[9](input);
			append_dev(div2, t9);
			mount_component(button0, div2, null);
			append_dev(div2, t10);
			mount_component(button1, div2, null);
			append_dev(div2, t11);
			mount_component(modal0, div2, null);
			append_dev(div2, t12);
			mount_component(modal1, div2, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", /*handleFileChange*/ ctx[7], false, false, false, false),
					listen_dev(form, "submit", /*handleSubmit*/ ctx[8], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*selectedFileName*/ 8) set_data_dev(t7, /*selectedFileName*/ ctx[3]);
			const button0_changes = {};

			if (dirty & /*$$scope*/ 16384) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 16384) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
			const modal0_changes = {};
			if (dirty & /*isExplanationModalOpen*/ 1) modal0_changes.isOpen = /*isExplanationModalOpen*/ ctx[0];

			if (dirty & /*$$scope*/ 16384) {
				modal0_changes.$$scope = { dirty, ctx };
			}

			modal0.$set(modal0_changes);
			const modal1_changes = {};
			if (dirty & /*isImageModalOpen*/ 2) modal1_changes.isOpen = /*isImageModalOpen*/ ctx[1];
			if (dirty & /*isImageModalOpen*/ 2) modal1_changes.toggle = /*func*/ ctx[12];

			if (dirty & /*$$scope, selectedImageURL*/ 16388) {
				modal1_changes.$$scope = { dirty, ctx };
			}

			modal1.$set(modal1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(spinner.$$.fragment, local);
			transition_in(menu.$$.fragment, local);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(modal0.$$.fragment, local);
			transition_in(modal1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(spinner.$$.fragment, local);
			transition_out(menu.$$.fragment, local);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(modal0.$$.fragment, local);
			transition_out(modal1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(spinner, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(form);
			destroy_component(menu);
			/*input_binding*/ ctx[9](null);
			destroy_component(button0);
			destroy_component(button1);
			destroy_component(modal0);
			destroy_component(modal1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Scraping', slots, []);
	let isExplanationModalOpen = false;
	let isImageModalOpen = false;
	let selectedImageURL = ""; // 選択された画像のURL
	let selectedFile;
	let selectedFileName = "";
	let fileInput;

	function toggleExplanationModal() {
		$$invalidate(0, isExplanationModalOpen = !isExplanationModalOpen);
	}

	function toggleImageModal(imageSrc) {
		$$invalidate(2, selectedImageURL = imageSrc);
		$$invalidate(1, isImageModalOpen = !isImageModalOpen);
	}

	function handleFileChange(event) {
		selectedFile = event.target.files[0];
		$$invalidate(3, selectedFileName = selectedFile ? selectedFile.name : "");
	}

	async function handleSubmit(event) {
		event.preventDefault(); // デフォルトのフォーム送信を防止

		if (!selectedFile) {
			alert("ファイルが選択されていません。");
			return;
		}

		isLoading.set(true);
		const formData = new FormData();
		formData.append("fileUpload", selectedFile);
		const response = await fetch("/upload", { method: "POST", body: formData });

		if (response.ok) {
			const blob = await response.blob();
			const downloadUrl = window.URL.createObjectURL(blob);
			const a = document.createElement("a");
			a.style.display = "none";
			a.href = downloadUrl;
			a.download = response.headers.get("Content-Disposition").match(/filename="?(.+)"?/)[1];
			document.body.appendChild(a);
			a.click();
			document.body.removeChild(a);
		} else {
			const errorInfo = await response.json();
			alert(errorInfo.message);
			console.error("Upload failed");
		}

		isLoading.set(false);
		$$invalidate(4, fileInput.value = "", fileInput);
		selectedFile = null;
		$$invalidate(3, selectedFileName = "");
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Scraping> was created with unknown prop '${key}'`);
	});

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			fileInput = $$value;
			$$invalidate(4, fileInput);
		});
	}

	const click_handler = () => toggleImageModal("/static/images/upload_csv.png");
	const click_handler_1 = () => toggleImageModal("/static/images/download_csv.png");
	const func = () => $$invalidate(1, isImageModalOpen = false);

	$$self.$capture_state = () => ({
		Button,
		Modal,
		ModalBody,
		ModalHeader,
		Menu,
		Spinner: Spinner_1,
		isLoading,
		isExplanationModalOpen,
		isImageModalOpen,
		selectedImageURL,
		selectedFile,
		selectedFileName,
		fileInput,
		toggleExplanationModal,
		toggleImageModal,
		handleFileChange,
		handleSubmit
	});

	$$self.$inject_state = $$props => {
		if ('isExplanationModalOpen' in $$props) $$invalidate(0, isExplanationModalOpen = $$props.isExplanationModalOpen);
		if ('isImageModalOpen' in $$props) $$invalidate(1, isImageModalOpen = $$props.isImageModalOpen);
		if ('selectedImageURL' in $$props) $$invalidate(2, selectedImageURL = $$props.selectedImageURL);
		if ('selectedFile' in $$props) selectedFile = $$props.selectedFile;
		if ('selectedFileName' in $$props) $$invalidate(3, selectedFileName = $$props.selectedFileName);
		if ('fileInput' in $$props) $$invalidate(4, fileInput = $$props.fileInput);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		isExplanationModalOpen,
		isImageModalOpen,
		selectedImageURL,
		selectedFileName,
		fileInput,
		toggleExplanationModal,
		toggleImageModal,
		handleFileChange,
		handleSubmit,
		input_binding,
		click_handler,
		click_handler_1,
		func
	];
}

class Scraping extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Scraping",
			options,
			id: create_fragment.name
		});
	}
}

const app = new Scraping({
	target: document.body,
	props: {
		name: 'scraping'
	}
});

export { app as default };
//# sourceMappingURL=scraping.js.map
