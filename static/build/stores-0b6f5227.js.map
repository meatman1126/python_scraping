{"version":3,"file":"stores-0b6f5227.js","sources":["../../svelte-app/node_modules/svelte/store/index.mjs","../../svelte-app/src/components/stores.js"],"sourcesContent":["import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier} [start]\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=} start\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0 && stop) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let started = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (started) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        started = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n            // We need to set this to false because callbacks can still happen despite having unsubscribed:\n            // Callbacks might already be placed in the queue which doesn't know it should no longer\n            // invoke this derived store.\n            started = false;\n        };\n    });\n}\n/**\n * Takes a store and returns a new one derived from the old one that is readable.\n *\n * @param store - store to make readonly\n */\nfunction readonly(store) {\n    return {\n        subscribe: store.subscribe.bind(store)\n    };\n}\n\nexport { derived, readable, readonly, writable };\n","import { writable } from \"svelte/store\";\n\nexport const registered = writable(false);\nexport const isOpen = writable(false);"],"names":["subscriber_queue","writable","value","start","noop","stop","subscribers","Set","set","new_value","safe_not_equal","run_queue","length","subscriber","push","i","update","fn","subscribe","run","invalidate","add","size","delete","registered","isOpen"],"mappings":"+CAGA,MAAMA,EAAmB,GAgBzB,SAASC,EAASC,EAAOC,EAAQC,GAC7B,IAAIC,EACJ,MAAMC,EAAc,IAAIC,IACxB,SAASC,EAAIC,GACT,GAAIC,EAAeR,EAAOO,KACtBP,EAAQO,EACJJ,GAAM,CACN,MAAMM,GAAaX,EAAiBY,OACpC,IAAK,MAAMC,KAAcP,EACrBO,EAAW,KACXb,EAAiBc,KAAKD,EAAYX,GAEtC,GAAIS,EAAW,CACX,IAAK,IAAII,EAAI,EAAGA,EAAIf,EAAiBY,OAAQG,GAAK,EAC9Cf,EAAiBe,GAAG,GAAGf,EAAiBe,EAAI,IAEhDf,EAAiBY,OAAS,CAC7B,CACJ,CAER,CAmBD,MAAO,CAAEJ,MAAKQ,OAlBd,SAAgBC,GACZT,EAAIS,EAAGf,GACV,EAgBqBgB,UAftB,SAAmBC,EAAKC,EAAahB,GACjC,MAAMS,EAAa,CAACM,EAAKC,GAMzB,OALAd,EAAYe,IAAIR,GACS,IAArBP,EAAYgB,OACZjB,EAAOF,EAAMK,IAAQJ,GAEzBe,EAAIjB,GACG,KACHI,EAAYiB,OAAOV,GACM,IAArBP,EAAYgB,MAAcjB,IAC1BA,IACAA,EAAO,KACV,CAER,EAEL,CCzDY,MAACmB,EAAavB,GAAS,GACtBwB,EAASxB,GAAS","x_google_ignoreList":[0]}