
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35730/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as compute_rest_props, v as validate_slots, a as assign, e as exclude_internal_props, b as create_slot, f as element, g as space, h as attr_dev, j as add_location, k as insert_dev, l as append_dev, t as transition_in, m as group_outros, n as transition_out, o as check_outros, p as detach_dev, q as bubble, r as binding_callbacks, u as init_binding_group, w as update_slot_base, x as get_all_dirty_from_scope, y as get_slot_changes, z as text, A as set_data_dev, B as set_attributes, C as listen_dev, D as get_spread_update, E as run_all, F as empty, G as to_number, H as select_value, I as validate_each_argument, J as add_render_callback, K as select_options, L as select_option, M as set_input_value, N as noop, O as bind, P as create_component, Q as mount_component, R as destroy_component, T as destroy_each, U as get_spread_object, V as add_flush_callback, W as globals, X as validate_store, Y as component_subscribe } from './index-c8de33e2.js';
import { c as classnames, B as Button } from './Portal-ea51b76c.js';
import { M as Modal, a as ModalBody, b as ModalHeader } from './Modal-f1a12ead.js';
import { r as registered } from './stores-8fdee0f1.js';

/* node_modules/sveltestrap/src/FormCheck.svelte generated by Svelte v3.59.2 */
const file$6 = "node_modules/sveltestrap/src/FormCheck.svelte";
const get_label_slot_changes = dirty => ({});
const get_label_slot_context = ctx => ({});

// (68:2) {:else}
function create_else_block$1(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[11],
		{ class: /*inputClasses*/ ctx[9] },
		{ id: /*idFor*/ ctx[8] },
		{ type: "checkbox" },
		{ disabled: /*disabled*/ ctx[3] },
		{ name: /*name*/ ctx[5] },
		{ __value: /*value*/ ctx[7] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$6, 68, 4, 1451);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			input.checked = /*checked*/ ctx[0];
			/*input_binding_2*/ ctx[39](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_2*/ ctx[29], false, false, false, false),
					listen_dev(input, "change", /*change_handler_2*/ ctx[30], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_2*/ ctx[31], false, false, false, false),
					listen_dev(input, "input", /*input_handler_2*/ ctx[32], false, false, false, false),
					listen_dev(input, "change", /*input_change_handler_2*/ ctx[38])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11],
				dirty[0] & /*inputClasses*/ 512 && { class: /*inputClasses*/ ctx[9] },
				dirty[0] & /*idFor*/ 256 && { id: /*idFor*/ ctx[8] },
				{ type: "checkbox" },
				dirty[0] & /*disabled*/ 8 && { disabled: /*disabled*/ ctx[3] },
				dirty[0] & /*name*/ 32 && { name: /*name*/ ctx[5] },
				dirty[0] & /*value*/ 128 && { __value: /*value*/ ctx[7] }
			]));

			if (dirty[0] & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_2*/ ctx[39](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(68:2) {:else}",
		ctx
	});

	return block;
}

// (52:30) 
function create_if_block_2$1(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[11],
		{ class: /*inputClasses*/ ctx[9] },
		{ id: /*idFor*/ ctx[8] },
		{ type: "checkbox" },
		{ disabled: /*disabled*/ ctx[3] },
		{ name: /*name*/ ctx[5] },
		{ __value: /*value*/ ctx[7] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$6, 52, 4, 1187);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			input.checked = /*checked*/ ctx[0];
			/*input_binding_1*/ ctx[37](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_1*/ ctx[25], false, false, false, false),
					listen_dev(input, "change", /*change_handler_1*/ ctx[26], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_1*/ ctx[27], false, false, false, false),
					listen_dev(input, "input", /*input_handler_1*/ ctx[28], false, false, false, false),
					listen_dev(input, "change", /*input_change_handler_1*/ ctx[36])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11],
				dirty[0] & /*inputClasses*/ 512 && { class: /*inputClasses*/ ctx[9] },
				dirty[0] & /*idFor*/ 256 && { id: /*idFor*/ ctx[8] },
				{ type: "checkbox" },
				dirty[0] & /*disabled*/ 8 && { disabled: /*disabled*/ ctx[3] },
				dirty[0] & /*name*/ 32 && { name: /*name*/ ctx[5] },
				dirty[0] & /*value*/ 128 && { __value: /*value*/ ctx[7] }
			]));

			if (dirty[0] & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_1*/ ctx[37](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(52:30) ",
		ctx
	});

	return block;
}

// (36:2) {#if type === 'radio'}
function create_if_block_1$1(ctx) {
	let input;
	let binding_group;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[11],
		{ class: /*inputClasses*/ ctx[9] },
		{ id: /*idFor*/ ctx[8] },
		{ type: "radio" },
		{ disabled: /*disabled*/ ctx[3] },
		{ name: /*name*/ ctx[5] },
		{ __value: /*value*/ ctx[7] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	binding_group = init_binding_group(/*$$binding_groups*/ ctx[34][0]);

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$6, 36, 4, 907);
			binding_group.p(input);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			input.checked = input.__value === /*group*/ ctx[1];
			/*input_binding*/ ctx[35](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler*/ ctx[21], false, false, false, false),
					listen_dev(input, "change", /*change_handler*/ ctx[22], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler*/ ctx[23], false, false, false, false),
					listen_dev(input, "input", /*input_handler*/ ctx[24], false, false, false, false),
					listen_dev(input, "change", /*input_change_handler*/ ctx[33])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11],
				dirty[0] & /*inputClasses*/ 512 && { class: /*inputClasses*/ ctx[9] },
				dirty[0] & /*idFor*/ 256 && { id: /*idFor*/ ctx[8] },
				{ type: "radio" },
				dirty[0] & /*disabled*/ 8 && { disabled: /*disabled*/ ctx[3] },
				dirty[0] & /*name*/ 32 && { name: /*name*/ ctx[5] },
				dirty[0] & /*value*/ 128 && { __value: /*value*/ ctx[7] }
			]));

			if (dirty[0] & /*group*/ 2) {
				input.checked = input.__value === /*group*/ ctx[1];
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding*/ ctx[35](null);
			binding_group.r();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(36:2) {#if type === 'radio'}",
		ctx
	});

	return block;
}

// (85:2) {#if label}
function create_if_block$1(ctx) {
	let label_1;
	let current;
	const label_slot_template = /*#slots*/ ctx[20].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[19], get_label_slot_context);
	const label_slot_or_fallback = label_slot || fallback_block(ctx);

	const block = {
		c: function create() {
			label_1 = element("label");
			if (label_slot_or_fallback) label_slot_or_fallback.c();
			attr_dev(label_1, "class", "form-check-label");
			attr_dev(label_1, "for", /*idFor*/ ctx[8]);
			add_location(label_1, file$6, 85, 4, 1727);
		},
		m: function mount(target, anchor) {
			insert_dev(target, label_1, anchor);

			if (label_slot_or_fallback) {
				label_slot_or_fallback.m(label_1, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (label_slot) {
				if (label_slot.p && (!current || dirty[0] & /*$$scope*/ 524288)) {
					update_slot_base(
						label_slot,
						label_slot_template,
						ctx,
						/*$$scope*/ ctx[19],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
						: get_slot_changes(label_slot_template, /*$$scope*/ ctx[19], dirty, get_label_slot_changes),
						get_label_slot_context
					);
				}
			} else {
				if (label_slot_or_fallback && label_slot_or_fallback.p && (!current || dirty[0] & /*label*/ 16)) {
					label_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*idFor*/ 256) {
				attr_dev(label_1, "for", /*idFor*/ ctx[8]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label_1);
			if (label_slot_or_fallback) label_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(85:2) {#if label}",
		ctx
	});

	return block;
}

// (87:25) {label}
function fallback_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*label*/ ctx[4]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*label*/ 16) set_data_dev(t, /*label*/ ctx[4]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(87:25) {label}",
		ctx
	});

	return block;
}

function create_fragment$6(ctx) {
	let div;
	let t;
	let current;

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[6] === 'radio') return create_if_block_1$1;
		if (/*type*/ ctx[6] === 'switch') return create_if_block_2$1;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*label*/ ctx[4] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			attr_dev(div, "class", /*classes*/ ctx[10]);
			add_location(div, file$6, 34, 0, 856);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_block0.m(div, null);
			append_dev(div, t);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div, t);
				}
			}

			if (/*label*/ ctx[4]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*label*/ 16) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*classes*/ 1024) {
				attr_dev(div, "class", /*classes*/ ctx[10]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let classes;
	let inputClasses;
	let idFor;

	const omit_props_names = [
		"class","checked","disabled","group","id","inline","inner","invalid","label","name","reverse","size","type","valid","value"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('FormCheck', slots, ['label']);
	let { class: className = '' } = $$props;
	let { checked = false } = $$props;
	let { disabled = false } = $$props;
	let { group = undefined } = $$props;
	let { id = undefined } = $$props;
	let { inline = false } = $$props;
	let { inner = undefined } = $$props;
	let { invalid = false } = $$props;
	let { label = '' } = $$props;
	let { name = '' } = $$props;
	let { reverse = false } = $$props;
	let { size = '' } = $$props;
	let { type = 'checkbox' } = $$props;
	let { valid = false } = $$props;
	let { value = undefined } = $$props;
	const $$binding_groups = [[]];

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function input_change_handler() {
		group = this.__value;
		$$invalidate(1, group);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(2, inner);
		});
	}

	function input_change_handler_1() {
		checked = this.checked;
		$$invalidate(0, checked);
	}

	function input_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(2, inner);
		});
	}

	function input_change_handler_2() {
		checked = this.checked;
		$$invalidate(0, checked);
	}

	function input_binding_2($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(2, inner);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(12, className = $$new_props.class);
		if ('checked' in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('group' in $$new_props) $$invalidate(1, group = $$new_props.group);
		if ('id' in $$new_props) $$invalidate(13, id = $$new_props.id);
		if ('inline' in $$new_props) $$invalidate(14, inline = $$new_props.inline);
		if ('inner' in $$new_props) $$invalidate(2, inner = $$new_props.inner);
		if ('invalid' in $$new_props) $$invalidate(15, invalid = $$new_props.invalid);
		if ('label' in $$new_props) $$invalidate(4, label = $$new_props.label);
		if ('name' in $$new_props) $$invalidate(5, name = $$new_props.name);
		if ('reverse' in $$new_props) $$invalidate(16, reverse = $$new_props.reverse);
		if ('size' in $$new_props) $$invalidate(17, size = $$new_props.size);
		if ('type' in $$new_props) $$invalidate(6, type = $$new_props.type);
		if ('valid' in $$new_props) $$invalidate(18, valid = $$new_props.valid);
		if ('value' in $$new_props) $$invalidate(7, value = $$new_props.value);
		if ('$$scope' in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		classnames,
		className,
		checked,
		disabled,
		group,
		id,
		inline,
		inner,
		invalid,
		label,
		name,
		reverse,
		size,
		type,
		valid,
		value,
		idFor,
		inputClasses,
		classes
	});

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(12, className = $$new_props.className);
		if ('checked' in $$props) $$invalidate(0, checked = $$new_props.checked);
		if ('disabled' in $$props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('group' in $$props) $$invalidate(1, group = $$new_props.group);
		if ('id' in $$props) $$invalidate(13, id = $$new_props.id);
		if ('inline' in $$props) $$invalidate(14, inline = $$new_props.inline);
		if ('inner' in $$props) $$invalidate(2, inner = $$new_props.inner);
		if ('invalid' in $$props) $$invalidate(15, invalid = $$new_props.invalid);
		if ('label' in $$props) $$invalidate(4, label = $$new_props.label);
		if ('name' in $$props) $$invalidate(5, name = $$new_props.name);
		if ('reverse' in $$props) $$invalidate(16, reverse = $$new_props.reverse);
		if ('size' in $$props) $$invalidate(17, size = $$new_props.size);
		if ('type' in $$props) $$invalidate(6, type = $$new_props.type);
		if ('valid' in $$props) $$invalidate(18, valid = $$new_props.valid);
		if ('value' in $$props) $$invalidate(7, value = $$new_props.value);
		if ('idFor' in $$props) $$invalidate(8, idFor = $$new_props.idFor);
		if ('inputClasses' in $$props) $$invalidate(9, inputClasses = $$new_props.inputClasses);
		if ('classes' in $$props) $$invalidate(10, classes = $$new_props.classes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*className, reverse, type, inline, size*/ 217152) {
			$$invalidate(10, classes = classnames(className, 'form-check', {
				'form-check-reverse': reverse,
				'form-switch': type === 'switch',
				'form-check-inline': inline,
				[`form-control-${size}`]: size
			}));
		}

		if ($$self.$$.dirty[0] & /*invalid, valid*/ 294912) {
			$$invalidate(9, inputClasses = classnames('form-check-input', { 'is-invalid': invalid, 'is-valid': valid }));
		}

		if ($$self.$$.dirty[0] & /*id, label*/ 8208) {
			$$invalidate(8, idFor = id || label);
		}
	};

	return [
		checked,
		group,
		inner,
		disabled,
		label,
		name,
		type,
		value,
		idFor,
		inputClasses,
		classes,
		$$restProps,
		className,
		id,
		inline,
		invalid,
		reverse,
		size,
		valid,
		$$scope,
		slots,
		blur_handler,
		change_handler,
		focus_handler,
		input_handler,
		blur_handler_1,
		change_handler_1,
		focus_handler_1,
		input_handler_1,
		blur_handler_2,
		change_handler_2,
		focus_handler_2,
		input_handler_2,
		input_change_handler,
		$$binding_groups,
		input_binding,
		input_change_handler_1,
		input_binding_1,
		input_change_handler_2,
		input_binding_2
	];
}

class FormCheck extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$6,
			create_fragment$6,
			safe_not_equal,
			{
				class: 12,
				checked: 0,
				disabled: 3,
				group: 1,
				id: 13,
				inline: 14,
				inner: 2,
				invalid: 15,
				label: 4,
				name: 5,
				reverse: 16,
				size: 17,
				type: 6,
				valid: 18,
				value: 7
			},
			null,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FormCheck",
			options,
			id: create_fragment$6.name
		});
	}

	get class() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get checked() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set checked(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get group() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set group(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get inline() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inline(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get inner() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inner(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalid() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalid(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get reverse() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set reverse(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get valid() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set valid(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<FormCheck>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<FormCheck>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/FormFeedback.svelte generated by Svelte v3.59.2 */
const file$5 = "node_modules/sveltestrap/src/FormFeedback.svelte";

function create_fragment$5(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	let div_levels = [/*$$restProps*/ ctx[1], { class: /*classes*/ ctx[0] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			add_location(div, file$5, 19, 0, 368);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1],
				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	const omit_props_names = ["class","valid","tooltip"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('FormFeedback', slots, ['default']);
	let { class: className = '' } = $$props;
	let { valid = undefined } = $$props;
	let { tooltip = false } = $$props;
	let classes;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ('valid' in $$new_props) $$invalidate(3, valid = $$new_props.valid);
		if ('tooltip' in $$new_props) $$invalidate(4, tooltip = $$new_props.tooltip);
		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		classnames,
		className,
		valid,
		tooltip,
		classes
	});

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
		if ('valid' in $$props) $$invalidate(3, valid = $$new_props.valid);
		if ('tooltip' in $$props) $$invalidate(4, tooltip = $$new_props.tooltip);
		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*tooltip, className, valid*/ 28) {
			{
				const validMode = tooltip ? 'tooltip' : 'feedback';
				$$invalidate(0, classes = classnames(className, valid ? `valid-${validMode}` : `invalid-${validMode}`));
			}
		}
	};

	return [classes, $$restProps, className, valid, tooltip, $$scope, slots];
}

class FormFeedback extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { class: 2, valid: 3, tooltip: 4 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FormFeedback",
			options,
			id: create_fragment$5.name
		});
	}

	get class() {
		throw new Error("<FormFeedback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<FormFeedback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get valid() {
		throw new Error("<FormFeedback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set valid(value) {
		throw new Error("<FormFeedback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tooltip() {
		throw new Error("<FormFeedback>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tooltip(value) {
		throw new Error("<FormFeedback>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/Input.svelte generated by Svelte v3.59.2 */
const file$4 = "node_modules/sveltestrap/src/Input.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[211] = list[i];
	return child_ctx;
}

// (492:40) 
function create_if_block_22(ctx) {
	let select;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[25].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[210], null);

	let select_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ name: /*name*/ ctx[13] },
		{ disabled: /*disabled*/ ctx[8] },
		{ readonly: /*readonly*/ ctx[15] }
	];

	let select_data = {};

	for (let i = 0; i < select_levels.length; i += 1) {
		select_data = assign(select_data, select_levels[i]);
	}

	const block = {
		c: function create() {
			select = element("select");
			if (default_slot) default_slot.c();
			set_attributes(select, select_data);
			if (/*value*/ ctx[6] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[208].call(select));
			add_location(select, file$4, 492, 2, 9236);
		},
		m: function mount(target, anchor) {
			insert_dev(target, select, anchor);

			if (default_slot) {
				default_slot.m(select, null);
			}

			'value' in select_data && (select_data.multiple ? select_options : select_option)(select, select_data.value);
			if (select.autofocus) select.focus();
			select_option(select, /*value*/ ctx[6], true);
			/*select_binding*/ ctx[209](select);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(select, "blur", /*blur_handler_20*/ ctx[157], false, false, false, false),
					listen_dev(select, "change", /*change_handler_19*/ ctx[158], false, false, false, false),
					listen_dev(select, "focus", /*focus_handler_20*/ ctx[159], false, false, false, false),
					listen_dev(select, "input", /*input_handler_19*/ ctx[160], false, false, false, false),
					listen_dev(select, "change", /*select_change_handler*/ ctx[208])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[6] & /*$$scope*/ 16777216)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[210],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[210])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[210], dirty, null),
						null
					);
				}
			}

			set_attributes(select, select_data = get_spread_update(select_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				(!current || dirty[0] & /*classes*/ 524288) && { class: /*classes*/ ctx[19] },
				(!current || dirty[0] & /*name*/ 8192) && { name: /*name*/ ctx[13] },
				(!current || dirty[0] & /*disabled*/ 256) && { disabled: /*disabled*/ ctx[8] },
				(!current || dirty[0] & /*readonly*/ 32768) && { readonly: /*readonly*/ ctx[15] }
			]));

			if (dirty[0] & /*$$restProps, classes, name, disabled, readonly*/ 4759808 && 'value' in select_data) (select_data.multiple ? select_options : select_option)(select, select_data.value);

			if (dirty[0] & /*value*/ 64) {
				select_option(select, /*value*/ ctx[6]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(select);
			if (default_slot) default_slot.d(detaching);
			/*select_binding*/ ctx[209](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_22.name,
		type: "if",
		source: "(492:40) ",
		ctx
	});

	return block;
}

// (474:29) 
function create_if_block_21(ctx) {
	let textarea;
	let mounted;
	let dispose;

	let textarea_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ disabled: /*disabled*/ ctx[8] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ readOnly: /*readonly*/ ctx[15] }
	];

	let textarea_data = {};

	for (let i = 0; i < textarea_levels.length; i += 1) {
		textarea_data = assign(textarea_data, textarea_levels[i]);
	}

	const block = {
		c: function create() {
			textarea = element("textarea");
			set_attributes(textarea, textarea_data);
			add_location(textarea, file$4, 474, 2, 8945);
		},
		m: function mount(target, anchor) {
			insert_dev(target, textarea, anchor);
			if (textarea.autofocus) textarea.focus();
			set_input_value(textarea, /*value*/ ctx[6]);
			/*textarea_binding*/ ctx[207](textarea);

			if (!mounted) {
				dispose = [
					listen_dev(textarea, "blur", /*blur_handler_19*/ ctx[150], false, false, false, false),
					listen_dev(textarea, "change", /*change_handler_18*/ ctx[151], false, false, false, false),
					listen_dev(textarea, "focus", /*focus_handler_19*/ ctx[152], false, false, false, false),
					listen_dev(textarea, "input", /*input_handler_18*/ ctx[153], false, false, false, false),
					listen_dev(textarea, "keydown", /*keydown_handler_19*/ ctx[154], false, false, false, false),
					listen_dev(textarea, "keypress", /*keypress_handler_19*/ ctx[155], false, false, false, false),
					listen_dev(textarea, "keyup", /*keyup_handler_19*/ ctx[156], false, false, false, false),
					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[206])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(textarea, textarea_data = get_spread_update(textarea_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] }
			]));

			if (dirty[0] & /*value*/ 64) {
				set_input_value(textarea, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(textarea);
			/*textarea_binding*/ ctx[207](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_21.name,
		type: "if",
		source: "(474:29) ",
		ctx
	});

	return block;
}

// (94:0) {#if tag === 'input'}
function create_if_block_2(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	const if_block_creators = [
		create_if_block_3,
		create_if_block_4,
		create_if_block_5,
		create_if_block_6,
		create_if_block_7,
		create_if_block_8,
		create_if_block_9,
		create_if_block_10,
		create_if_block_11,
		create_if_block_12,
		create_if_block_13,
		create_if_block_14,
		create_if_block_15,
		create_if_block_16,
		create_if_block_17,
		create_if_block_18,
		create_if_block_19,
		create_if_block_20,
		create_else_block_1
	];

	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*type*/ ctx[17] === 'text') return 0;
		if (/*type*/ ctx[17] === 'password') return 1;
		if (/*type*/ ctx[17] === 'color') return 2;
		if (/*type*/ ctx[17] === 'email') return 3;
		if (/*type*/ ctx[17] === 'file') return 4;
		if (/*type*/ ctx[17] === 'checkbox' || /*type*/ ctx[17] === 'radio' || /*type*/ ctx[17] === 'switch') return 5;
		if (/*type*/ ctx[17] === 'url') return 6;
		if (/*type*/ ctx[17] === 'number') return 7;
		if (/*type*/ ctx[17] === 'date') return 8;
		if (/*type*/ ctx[17] === 'time') return 9;
		if (/*type*/ ctx[17] === 'datetime') return 10;
		if (/*type*/ ctx[17] === 'datetime-local') return 11;
		if (/*type*/ ctx[17] === 'month') return 12;
		if (/*type*/ ctx[17] === 'color') return 13;
		if (/*type*/ ctx[17] === 'range') return 14;
		if (/*type*/ ctx[17] === 'search') return 15;
		if (/*type*/ ctx[17] === 'tel') return 16;
		if (/*type*/ ctx[17] === 'week') return 17;
		return 18;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(94:0) {#if tag === 'input'}",
		ctx
	});

	return block;
}

// (455:2) {:else}
function create_else_block_1(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ type: /*type*/ ctx[17] },
		{ readOnly: /*readonly*/ ctx[15] },
		{ class: /*classes*/ ctx[19] },
		{ name: /*name*/ ctx[13] },
		{ disabled: /*disabled*/ ctx[8] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ value: /*value*/ ctx[6] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 455, 4, 8614);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);

			if ('value' in input_data) {
				input.value = input_data.value;
			}

			if (input.autofocus) input.focus();

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_18*/ ctx[145], false, false, false, false),
					listen_dev(input, "change", /*handleInput*/ ctx[21], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_18*/ ctx[146], false, false, false, false),
					listen_dev(input, "input", /*handleInput*/ ctx[21], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_18*/ ctx[147], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_18*/ ctx[148], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_18*/ ctx[149], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*type*/ 131072 && { type: /*type*/ ctx[17] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] },
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*value*/ 64 && input.value !== /*value*/ ctx[6] && { value: /*value*/ ctx[6] }
			]));

			if ('value' in input_data) {
				input.value = input_data.value;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(455:2) {:else}",
		ctx
	});

	return block;
}

// (436:28) 
function create_if_block_20(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ type: "week" },
		{ disabled: /*disabled*/ ctx[8] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ readOnly: /*readonly*/ ctx[15] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 436, 4, 8305);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_16*/ ctx[205](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_17*/ ctx[138], false, false, false, false),
					listen_dev(input, "change", /*change_handler_17*/ ctx[139], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_17*/ ctx[140], false, false, false, false),
					listen_dev(input, "input", /*input_handler_17*/ ctx[141], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_17*/ ctx[142], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_17*/ ctx[143], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_17*/ ctx[144], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler_14*/ ctx[204])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				{ type: "week" },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] }
			]));

			if (dirty[0] & /*value*/ 64) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_16*/ ctx[205](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_20.name,
		type: "if",
		source: "(436:28) ",
		ctx
	});

	return block;
}

// (416:27) 
function create_if_block_19(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ type: "tel" },
		{ disabled: /*disabled*/ ctx[8] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ readOnly: /*readonly*/ ctx[15] },
		{ size: /*size*/ ctx[1] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 416, 4, 7965);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_15*/ ctx[203](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_16*/ ctx[131], false, false, false, false),
					listen_dev(input, "change", /*change_handler_16*/ ctx[132], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_16*/ ctx[133], false, false, false, false),
					listen_dev(input, "input", /*input_handler_16*/ ctx[134], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_16*/ ctx[135], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_16*/ ctx[136], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_16*/ ctx[137], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler_13*/ ctx[202])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				{ type: "tel" },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] },
				dirty[0] & /*size*/ 2 && { size: /*size*/ ctx[1] }
			]));

			if (dirty[0] & /*value*/ 64) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_15*/ ctx[203](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_19.name,
		type: "if",
		source: "(416:27) ",
		ctx
	});

	return block;
}

// (396:30) 
function create_if_block_18(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ type: "search" },
		{ disabled: /*disabled*/ ctx[8] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ readOnly: /*readonly*/ ctx[15] },
		{ size: /*size*/ ctx[1] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 396, 4, 7623);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_14*/ ctx[201](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_15*/ ctx[124], false, false, false, false),
					listen_dev(input, "change", /*change_handler_15*/ ctx[125], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_15*/ ctx[126], false, false, false, false),
					listen_dev(input, "input", /*input_handler_15*/ ctx[127], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_15*/ ctx[128], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_15*/ ctx[129], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_15*/ ctx[130], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler_12*/ ctx[200])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				{ type: "search" },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] },
				dirty[0] & /*size*/ 2 && { size: /*size*/ ctx[1] }
			]));

			if (dirty[0] & /*value*/ 64 && input.value !== /*value*/ ctx[6]) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_14*/ ctx[201](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_18.name,
		type: "if",
		source: "(396:30) ",
		ctx
	});

	return block;
}

// (377:29) 
function create_if_block_17(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ type: "range" },
		{ readOnly: /*readonly*/ ctx[15] },
		{ class: /*classes*/ ctx[19] },
		{ name: /*name*/ ctx[13] },
		{ disabled: /*disabled*/ ctx[8] },
		{ placeholder: /*placeholder*/ ctx[14] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 377, 4, 7292);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_13*/ ctx[199](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_14*/ ctx[117], false, false, false, false),
					listen_dev(input, "change", /*change_handler_14*/ ctx[118], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_14*/ ctx[119], false, false, false, false),
					listen_dev(input, "input", /*input_handler_14*/ ctx[120], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_14*/ ctx[121], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_14*/ ctx[122], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_14*/ ctx[123], false, false, false, false),
					listen_dev(input, "change", /*input_change_input_handler*/ ctx[198]),
					listen_dev(input, "input", /*input_change_input_handler*/ ctx[198])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				{ type: "range" },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] },
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] }
			]));

			if (dirty[0] & /*value*/ 64) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_13*/ ctx[199](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_17.name,
		type: "if",
		source: "(377:29) ",
		ctx
	});

	return block;
}

// (358:29) 
function create_if_block_16(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ type: "color" },
		{ readOnly: /*readonly*/ ctx[15] },
		{ class: /*classes*/ ctx[19] },
		{ name: /*name*/ ctx[13] },
		{ disabled: /*disabled*/ ctx[8] },
		{ placeholder: /*placeholder*/ ctx[14] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 358, 4, 6962);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_12*/ ctx[197](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_13*/ ctx[110], false, false, false, false),
					listen_dev(input, "change", /*change_handler_13*/ ctx[111], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_13*/ ctx[112], false, false, false, false),
					listen_dev(input, "input", /*input_handler_13*/ ctx[113], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_13*/ ctx[114], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_13*/ ctx[115], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_13*/ ctx[116], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler_11*/ ctx[196])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				{ type: "color" },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] },
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] }
			]));

			if (dirty[0] & /*value*/ 64) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_12*/ ctx[197](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_16.name,
		type: "if",
		source: "(358:29) ",
		ctx
	});

	return block;
}

// (339:29) 
function create_if_block_15(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ type: "month" },
		{ disabled: /*disabled*/ ctx[8] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ readOnly: /*readonly*/ ctx[15] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 339, 4, 6632);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_11*/ ctx[195](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_12*/ ctx[103], false, false, false, false),
					listen_dev(input, "change", /*change_handler_12*/ ctx[104], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_12*/ ctx[105], false, false, false, false),
					listen_dev(input, "input", /*input_handler_12*/ ctx[106], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_12*/ ctx[107], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_12*/ ctx[108], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_12*/ ctx[109], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler_10*/ ctx[194])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				{ type: "month" },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] }
			]));

			if (dirty[0] & /*value*/ 64) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_11*/ ctx[195](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_15.name,
		type: "if",
		source: "(339:29) ",
		ctx
	});

	return block;
}

// (320:38) 
function create_if_block_14(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ type: "datetime-local" },
		{ disabled: /*disabled*/ ctx[8] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ readOnly: /*readonly*/ ctx[15] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 320, 4, 6293);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_10*/ ctx[193](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_11*/ ctx[96], false, false, false, false),
					listen_dev(input, "change", /*change_handler_11*/ ctx[97], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_11*/ ctx[98], false, false, false, false),
					listen_dev(input, "input", /*input_handler_11*/ ctx[99], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_11*/ ctx[100], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_11*/ ctx[101], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_11*/ ctx[102], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler_9*/ ctx[192])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				{ type: "datetime-local" },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] }
			]));

			if (dirty[0] & /*value*/ 64) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_10*/ ctx[193](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_14.name,
		type: "if",
		source: "(320:38) ",
		ctx
	});

	return block;
}

// (301:32) 
function create_if_block_13(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ type: "datetime" },
		{ readOnly: /*readonly*/ ctx[15] },
		{ class: /*classes*/ ctx[19] },
		{ name: /*name*/ ctx[13] },
		{ disabled: /*disabled*/ ctx[8] },
		{ placeholder: /*placeholder*/ ctx[14] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 301, 4, 5951);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_9*/ ctx[191](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_10*/ ctx[89], false, false, false, false),
					listen_dev(input, "change", /*change_handler_10*/ ctx[90], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_10*/ ctx[91], false, false, false, false),
					listen_dev(input, "input", /*input_handler_10*/ ctx[92], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_10*/ ctx[93], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_10*/ ctx[94], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_10*/ ctx[95], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler_8*/ ctx[190])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				{ type: "datetime" },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] },
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] }
			]));

			if (dirty[0] & /*value*/ 64) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_9*/ ctx[191](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_13.name,
		type: "if",
		source: "(301:32) ",
		ctx
	});

	return block;
}

// (282:28) 
function create_if_block_12(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ type: "time" },
		{ disabled: /*disabled*/ ctx[8] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ readOnly: /*readonly*/ ctx[15] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 282, 4, 5619);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_8*/ ctx[189](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_9*/ ctx[82], false, false, false, false),
					listen_dev(input, "change", /*change_handler_9*/ ctx[83], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_9*/ ctx[84], false, false, false, false),
					listen_dev(input, "input", /*input_handler_9*/ ctx[85], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_9*/ ctx[86], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_9*/ ctx[87], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_9*/ ctx[88], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler_7*/ ctx[188])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				{ type: "time" },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] }
			]));

			if (dirty[0] & /*value*/ 64) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_8*/ ctx[189](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_12.name,
		type: "if",
		source: "(282:28) ",
		ctx
	});

	return block;
}

// (263:28) 
function create_if_block_11(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ type: "date" },
		{ disabled: /*disabled*/ ctx[8] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ readOnly: /*readonly*/ ctx[15] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 263, 4, 5291);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_7*/ ctx[187](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_8*/ ctx[75], false, false, false, false),
					listen_dev(input, "change", /*change_handler_8*/ ctx[76], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_8*/ ctx[77], false, false, false, false),
					listen_dev(input, "input", /*input_handler_8*/ ctx[78], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_8*/ ctx[79], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_8*/ ctx[80], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_8*/ ctx[81], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler_6*/ ctx[186])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				{ type: "date" },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] }
			]));

			if (dirty[0] & /*value*/ 64) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_7*/ ctx[187](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_11.name,
		type: "if",
		source: "(263:28) ",
		ctx
	});

	return block;
}

// (244:30) 
function create_if_block_10(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ type: "number" },
		{ readOnly: /*readonly*/ ctx[15] },
		{ name: /*name*/ ctx[13] },
		{ disabled: /*disabled*/ ctx[8] },
		{ placeholder: /*placeholder*/ ctx[14] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 244, 4, 4961);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_6*/ ctx[185](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_7*/ ctx[68], false, false, false, false),
					listen_dev(input, "change", /*change_handler_7*/ ctx[69], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_7*/ ctx[70], false, false, false, false),
					listen_dev(input, "input", /*input_handler_7*/ ctx[71], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_7*/ ctx[72], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_7*/ ctx[73], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_7*/ ctx[74], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler_5*/ ctx[184])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				{ type: "number" },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] }
			]));

			if (dirty[0] & /*value*/ 64 && to_number(input.value) !== /*value*/ ctx[6]) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_6*/ ctx[185](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_10.name,
		type: "if",
		source: "(244:30) ",
		ctx
	});

	return block;
}

// (224:27) 
function create_if_block_9(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ type: "url" },
		{ disabled: /*disabled*/ ctx[8] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ readOnly: /*readonly*/ ctx[15] },
		{ size: /*size*/ ctx[1] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 224, 4, 4619);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_5*/ ctx[183](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_6*/ ctx[61], false, false, false, false),
					listen_dev(input, "change", /*change_handler_6*/ ctx[62], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_6*/ ctx[63], false, false, false, false),
					listen_dev(input, "input", /*input_handler_6*/ ctx[64], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_6*/ ctx[65], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_6*/ ctx[66], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_6*/ ctx[67], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler_4*/ ctx[182])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				{ type: "url" },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] },
				dirty[0] & /*size*/ 2 && { size: /*size*/ ctx[1] }
			]));

			if (dirty[0] & /*value*/ 64 && input.value !== /*value*/ ctx[6]) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_5*/ ctx[183](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(224:27) ",
		ctx
	});

	return block;
}

// (198:73) 
function create_if_block_8(ctx) {
	let formcheck;
	let updating_checked;
	let updating_inner;
	let updating_group;
	let updating_value;
	let current;

	const formcheck_spread_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*className*/ ctx[7] },
		{ size: /*bsSize*/ ctx[0] },
		{ type: /*type*/ ctx[17] },
		{ disabled: /*disabled*/ ctx[8] },
		{ invalid: /*invalid*/ ctx[10] },
		{ label: /*label*/ ctx[11] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ reverse: /*reverse*/ ctx[16] },
		{ readonly: /*readonly*/ ctx[15] },
		{ valid: /*valid*/ ctx[18] }
	];

	function formcheck_checked_binding(value) {
		/*formcheck_checked_binding*/ ctx[171](value);
	}

	function formcheck_inner_binding(value) {
		/*formcheck_inner_binding*/ ctx[172](value);
	}

	function formcheck_group_binding(value) {
		/*formcheck_group_binding*/ ctx[173](value);
	}

	function formcheck_value_binding(value) {
		/*formcheck_value_binding*/ ctx[174](value);
	}

	let formcheck_props = {};

	for (let i = 0; i < formcheck_spread_levels.length; i += 1) {
		formcheck_props = assign(formcheck_props, formcheck_spread_levels[i]);
	}

	if (/*checked*/ ctx[2] !== void 0) {
		formcheck_props.checked = /*checked*/ ctx[2];
	}

	if (/*inner*/ ctx[5] !== void 0) {
		formcheck_props.inner = /*inner*/ ctx[5];
	}

	if (/*group*/ ctx[4] !== void 0) {
		formcheck_props.group = /*group*/ ctx[4];
	}

	if (/*value*/ ctx[6] !== void 0) {
		formcheck_props.value = /*value*/ ctx[6];
	}

	formcheck = new FormCheck({ props: formcheck_props, $$inline: true });
	binding_callbacks.push(() => bind(formcheck, 'checked', formcheck_checked_binding));
	binding_callbacks.push(() => bind(formcheck, 'inner', formcheck_inner_binding));
	binding_callbacks.push(() => bind(formcheck, 'group', formcheck_group_binding));
	binding_callbacks.push(() => bind(formcheck, 'value', formcheck_value_binding));
	formcheck.$on("blur", /*blur_handler_5*/ ctx[175]);
	formcheck.$on("change", /*change_handler_5*/ ctx[176]);
	formcheck.$on("focus", /*focus_handler_5*/ ctx[177]);
	formcheck.$on("input", /*input_handler_5*/ ctx[178]);
	formcheck.$on("keydown", /*keydown_handler_5*/ ctx[179]);
	formcheck.$on("keypress", /*keypress_handler_5*/ ctx[180]);
	formcheck.$on("keyup", /*keyup_handler_5*/ ctx[181]);

	const block = {
		c: function create() {
			create_component(formcheck.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(formcheck, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formcheck_changes = (dirty[0] & /*$$restProps, className, bsSize, type, disabled, invalid, label, name, placeholder, reverse, readonly, valid*/ 4713857)
			? get_spread_update(formcheck_spread_levels, [
					dirty[0] & /*$$restProps*/ 4194304 && get_spread_object(/*$$restProps*/ ctx[22]),
					dirty[0] & /*className*/ 128 && { class: /*className*/ ctx[7] },
					dirty[0] & /*bsSize*/ 1 && { size: /*bsSize*/ ctx[0] },
					dirty[0] & /*type*/ 131072 && { type: /*type*/ ctx[17] },
					dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
					dirty[0] & /*invalid*/ 1024 && { invalid: /*invalid*/ ctx[10] },
					dirty[0] & /*label*/ 2048 && { label: /*label*/ ctx[11] },
					dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
					dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
					dirty[0] & /*reverse*/ 65536 && { reverse: /*reverse*/ ctx[16] },
					dirty[0] & /*readonly*/ 32768 && { readonly: /*readonly*/ ctx[15] },
					dirty[0] & /*valid*/ 262144 && { valid: /*valid*/ ctx[18] }
				])
			: {};

			if (!updating_checked && dirty[0] & /*checked*/ 4) {
				updating_checked = true;
				formcheck_changes.checked = /*checked*/ ctx[2];
				add_flush_callback(() => updating_checked = false);
			}

			if (!updating_inner && dirty[0] & /*inner*/ 32) {
				updating_inner = true;
				formcheck_changes.inner = /*inner*/ ctx[5];
				add_flush_callback(() => updating_inner = false);
			}

			if (!updating_group && dirty[0] & /*group*/ 16) {
				updating_group = true;
				formcheck_changes.group = /*group*/ ctx[4];
				add_flush_callback(() => updating_group = false);
			}

			if (!updating_value && dirty[0] & /*value*/ 64) {
				updating_value = true;
				formcheck_changes.value = /*value*/ ctx[6];
				add_flush_callback(() => updating_value = false);
			}

			formcheck.$set(formcheck_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formcheck.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formcheck.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formcheck, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(198:73) ",
		ctx
	});

	return block;
}

// (175:28) 
function create_if_block_7(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ type: "file" },
		{ disabled: /*disabled*/ ctx[8] },
		{ invalid: /*invalid*/ ctx[10] },
		{ multiple: /*multiple*/ ctx[12] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ readOnly: /*readonly*/ ctx[15] },
		{ valid: /*valid*/ ctx[18] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 175, 4, 3745);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			/*input_binding_4*/ ctx[170](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_4*/ ctx[54], false, false, false, false),
					listen_dev(input, "change", /*change_handler_4*/ ctx[55], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_4*/ ctx[56], false, false, false, false),
					listen_dev(input, "input", /*input_handler_4*/ ctx[57], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_4*/ ctx[58], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_4*/ ctx[59], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_4*/ ctx[60], false, false, false, false),
					listen_dev(input, "change", /*input_change_handler*/ ctx[169])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				{ type: "file" },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*invalid*/ 1024 && { invalid: /*invalid*/ ctx[10] },
				dirty[0] & /*multiple*/ 4096 && { multiple: /*multiple*/ ctx[12] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] },
				dirty[0] & /*valid*/ 262144 && { valid: /*valid*/ ctx[18] }
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_4*/ ctx[170](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(175:28) ",
		ctx
	});

	return block;
}

// (154:29) 
function create_if_block_6(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ type: "email" },
		{ disabled: /*disabled*/ ctx[8] },
		{ multiple: /*multiple*/ ctx[12] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ readOnly: /*readonly*/ ctx[15] },
		{ size: /*size*/ ctx[1] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 154, 4, 3386);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_3*/ ctx[168](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_3*/ ctx[47], false, false, false, false),
					listen_dev(input, "change", /*change_handler_3*/ ctx[48], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_3*/ ctx[49], false, false, false, false),
					listen_dev(input, "input", /*input_handler_3*/ ctx[50], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_3*/ ctx[51], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_3*/ ctx[52], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_3*/ ctx[53], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler_3*/ ctx[167])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				{ type: "email" },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*multiple*/ 4096 && { multiple: /*multiple*/ ctx[12] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] },
				dirty[0] & /*size*/ 2 && { size: /*size*/ ctx[1] }
			]));

			if (dirty[0] & /*value*/ 64 && input.value !== /*value*/ ctx[6]) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_3*/ ctx[168](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(154:29) ",
		ctx
	});

	return block;
}

// (135:29) 
function create_if_block_5(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ type: "color" },
		{ disabled: /*disabled*/ ctx[8] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ readOnly: /*readonly*/ ctx[15] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 135, 4, 3056);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_2*/ ctx[166](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_2*/ ctx[40], false, false, false, false),
					listen_dev(input, "change", /*change_handler_2*/ ctx[41], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_2*/ ctx[42], false, false, false, false),
					listen_dev(input, "input", /*input_handler_2*/ ctx[43], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_2*/ ctx[44], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_2*/ ctx[45], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_2*/ ctx[46], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler_2*/ ctx[165])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				{ type: "color" },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] }
			]));

			if (dirty[0] & /*value*/ 64) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_2*/ ctx[166](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(135:29) ",
		ctx
	});

	return block;
}

// (115:32) 
function create_if_block_4(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ type: "password" },
		{ disabled: /*disabled*/ ctx[8] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ readOnly: /*readonly*/ ctx[15] },
		{ size: /*size*/ ctx[1] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 115, 4, 2710);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding_1*/ ctx[164](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler_1*/ ctx[33], false, false, false, false),
					listen_dev(input, "change", /*change_handler_1*/ ctx[34], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler_1*/ ctx[35], false, false, false, false),
					listen_dev(input, "input", /*input_handler_1*/ ctx[36], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler_1*/ ctx[37], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler_1*/ ctx[38], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_1*/ ctx[39], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler_1*/ ctx[163])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				{ type: "password" },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] },
				dirty[0] & /*size*/ 2 && { size: /*size*/ ctx[1] }
			]));

			if (dirty[0] & /*value*/ 64 && input.value !== /*value*/ ctx[6]) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding_1*/ ctx[164](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(115:32) ",
		ctx
	});

	return block;
}

// (95:2) {#if type === 'text'}
function create_if_block_3(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[22],
		{ class: /*classes*/ ctx[19] },
		{ type: "text" },
		{ disabled: /*disabled*/ ctx[8] },
		{ name: /*name*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ readOnly: /*readonly*/ ctx[15] },
		{ size: /*size*/ ctx[1] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const block = {
		c: function create() {
			input = element("input");
			set_attributes(input, input_data);
			add_location(input, file$4, 95, 4, 2365);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[6]);
			/*input_binding*/ ctx[162](input);

			if (!mounted) {
				dispose = [
					listen_dev(input, "blur", /*blur_handler*/ ctx[26], false, false, false, false),
					listen_dev(input, "change", /*change_handler*/ ctx[27], false, false, false, false),
					listen_dev(input, "focus", /*focus_handler*/ ctx[28], false, false, false, false),
					listen_dev(input, "input", /*input_handler*/ ctx[29], false, false, false, false),
					listen_dev(input, "keydown", /*keydown_handler*/ ctx[30], false, false, false, false),
					listen_dev(input, "keypress", /*keypress_handler*/ ctx[31], false, false, false, false),
					listen_dev(input, "keyup", /*keyup_handler*/ ctx[32], false, false, false, false),
					listen_dev(input, "input", /*input_input_handler*/ ctx[161])
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22],
				dirty[0] & /*classes*/ 524288 && { class: /*classes*/ ctx[19] },
				{ type: "text" },
				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
				dirty[0] & /*name*/ 8192 && { name: /*name*/ ctx[13] },
				dirty[0] & /*placeholder*/ 16384 && { placeholder: /*placeholder*/ ctx[14] },
				dirty[0] & /*readonly*/ 32768 && { readOnly: /*readonly*/ ctx[15] },
				dirty[0] & /*size*/ 2 && { size: /*size*/ ctx[1] }
			]));

			if (dirty[0] & /*value*/ 64 && input.value !== /*value*/ ctx[6]) {
				set_input_value(input, /*value*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*input_binding*/ ctx[162](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(95:2) {#if type === 'text'}",
		ctx
	});

	return block;
}

// (525:0) {#if feedback}
function create_if_block(ctx) {
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (dirty[0] & /*feedback*/ 512) show_if = null;
		if (show_if == null) show_if = !!Array.isArray(/*feedback*/ ctx[9]);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx, [-1, -1, -1, -1, -1, -1, -1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(525:0) {#if feedback}",
		ctx
	});

	return block;
}

// (530:2) {:else}
function create_else_block(ctx) {
	let formfeedback;
	let current;

	formfeedback = new FormFeedback({
			props: {
				valid: /*valid*/ ctx[18],
				$$slots: { default: [create_default_slot_1$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formfeedback.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(formfeedback, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formfeedback_changes = {};
			if (dirty[0] & /*valid*/ 262144) formfeedback_changes.valid = /*valid*/ ctx[18];

			if (dirty[0] & /*feedback*/ 512 | dirty[6] & /*$$scope*/ 16777216) {
				formfeedback_changes.$$scope = { dirty, ctx };
			}

			formfeedback.$set(formfeedback_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfeedback.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfeedback.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formfeedback, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(530:2) {:else}",
		ctx
	});

	return block;
}

// (526:2) {#if Array.isArray(feedback)}
function create_if_block_1(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*feedback*/ ctx[9];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*valid, feedback*/ 262656) {
				each_value = /*feedback*/ ctx[9];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(526:2) {#if Array.isArray(feedback)}",
		ctx
	});

	return block;
}

// (531:4) <FormFeedback {valid}>
function create_default_slot_1$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*feedback*/ ctx[9]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*feedback*/ 512) set_data_dev(t, /*feedback*/ ctx[9]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$2.name,
		type: "slot",
		source: "(531:4) <FormFeedback {valid}>",
		ctx
	});

	return block;
}

// (528:6) <FormFeedback {valid}>
function create_default_slot$2(ctx) {
	let t_value = /*msg*/ ctx[211] + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*feedback*/ 512 && t_value !== (t_value = /*msg*/ ctx[211] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(528:6) <FormFeedback {valid}>",
		ctx
	});

	return block;
}

// (527:4) {#each feedback as msg}
function create_each_block(ctx) {
	let formfeedback;
	let current;

	formfeedback = new FormFeedback({
			props: {
				valid: /*valid*/ ctx[18],
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formfeedback.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(formfeedback, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formfeedback_changes = {};
			if (dirty[0] & /*valid*/ 262144) formfeedback_changes.valid = /*valid*/ ctx[18];

			if (dirty[0] & /*feedback*/ 512 | dirty[6] & /*$$scope*/ 16777216) {
				formfeedback_changes.$$scope = { dirty, ctx };
			}

			formfeedback.$set(formfeedback_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formfeedback.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formfeedback.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formfeedback, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(527:4) {#each feedback as msg}",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let current_block_type_index;
	let if_block0;
	let t;
	let if_block1_anchor;
	let current;
	const if_block_creators = [create_if_block_2, create_if_block_21, create_if_block_22];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*tag*/ ctx[20] === 'input') return 0;
		if (/*tag*/ ctx[20] === 'textarea') return 1;
		if (/*tag*/ ctx[20] === 'select' && !/*multiple*/ ctx[12]) return 2;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	let if_block1 = /*feedback*/ ctx[9] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block0) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block0 = if_blocks[current_block_type_index];

					if (!if_block0) {
						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block0.c();
					} else {
						if_block0.p(ctx, dirty);
					}

					transition_in(if_block0, 1);
					if_block0.m(t.parentNode, t);
				} else {
					if_block0 = null;
				}
			}

			if (/*feedback*/ ctx[9]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*feedback*/ 512) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach_dev(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"class","bsSize","checked","color","disabled","feedback","files","group","inner","invalid","label","multiple","name","placeholder","plaintext","readonly","reverse","size","type","valid","value"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Input', slots, ['default']);
	let { class: className = '' } = $$props;
	let { bsSize = undefined } = $$props;
	let { checked = false } = $$props;
	let { color = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { feedback = undefined } = $$props;
	let { files = undefined } = $$props;
	let { group = undefined } = $$props;
	let { inner = undefined } = $$props;
	let { invalid = false } = $$props;
	let { label = undefined } = $$props;
	let { multiple = undefined } = $$props;
	let { name = '' } = $$props;
	let { placeholder = '' } = $$props;
	let { plaintext = false } = $$props;
	let { readonly = undefined } = $$props;
	let { reverse = false } = $$props;
	let { size = undefined } = $$props;
	let { type = 'text' } = $$props;
	let { valid = false } = $$props;
	let { value = '' } = $$props;
	let classes;
	let tag;

	const handleInput = event => {
		$$invalidate(6, value = event.target.value);
	};

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_3(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_3(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_3(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_3(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_3(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_3(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_3(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_4(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_4(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_4(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_4(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_4(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_4(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_4(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_6(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_6(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_6(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_6(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_6(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_6(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_6(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_7(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_7(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_7(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_7(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_7(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_7(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_7(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_8(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_8(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_8(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_8(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_8(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_8(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_8(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_9(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_9(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_9(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_9(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_9(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_9(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_9(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_10(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_10(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_10(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_10(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_10(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_10(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_10(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_11(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_11(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_11(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_11(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_11(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_11(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_11(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_12(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_12(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_12(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_12(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_12(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_12(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_12(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_13(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_13(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_13(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_13(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_13(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_13(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_13(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_14(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_14(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_14(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_14(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_14(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_14(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_14(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_15(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_15(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_15(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_15(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_15(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_15(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_15(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_16(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_16(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_16(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_16(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_16(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_16(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_16(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_17(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_17(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_17(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_17(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_17(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_17(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_17(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_18(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_18(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_18(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_18(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_18(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_19(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_18(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_19(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_18(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_19(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_19(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_19(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_20(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_19(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_20(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_19(event) {
		bubble.call(this, $$self, event);
	}

	function input_input_handler() {
		value = this.value;
		$$invalidate(6, value);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_input_handler_1() {
		value = this.value;
		$$invalidate(6, value);
	}

	function input_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_input_handler_2() {
		value = this.value;
		$$invalidate(6, value);
	}

	function input_binding_2($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_input_handler_3() {
		value = this.value;
		$$invalidate(6, value);
	}

	function input_binding_3($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_change_handler() {
		files = this.files;
		value = this.value;
		$$invalidate(3, files);
		$$invalidate(6, value);
	}

	function input_binding_4($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function formcheck_checked_binding(value) {
		checked = value;
		$$invalidate(2, checked);
	}

	function formcheck_inner_binding(value) {
		inner = value;
		$$invalidate(5, inner);
	}

	function formcheck_group_binding(value) {
		group = value;
		$$invalidate(4, group);
	}

	function formcheck_value_binding(value$1) {
		value = value$1;
		$$invalidate(6, value);
	}

	function blur_handler_5(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler_5(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_5(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler_5(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_5(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler_5(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler_5(event) {
		bubble.call(this, $$self, event);
	}

	function input_input_handler_4() {
		value = this.value;
		$$invalidate(6, value);
	}

	function input_binding_5($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_input_handler_5() {
		value = to_number(this.value);
		$$invalidate(6, value);
	}

	function input_binding_6($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_input_handler_6() {
		value = this.value;
		$$invalidate(6, value);
	}

	function input_binding_7($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_input_handler_7() {
		value = this.value;
		$$invalidate(6, value);
	}

	function input_binding_8($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_input_handler_8() {
		value = this.value;
		$$invalidate(6, value);
	}

	function input_binding_9($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_input_handler_9() {
		value = this.value;
		$$invalidate(6, value);
	}

	function input_binding_10($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_input_handler_10() {
		value = this.value;
		$$invalidate(6, value);
	}

	function input_binding_11($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_input_handler_11() {
		value = this.value;
		$$invalidate(6, value);
	}

	function input_binding_12($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_change_input_handler() {
		value = to_number(this.value);
		$$invalidate(6, value);
	}

	function input_binding_13($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_input_handler_12() {
		value = this.value;
		$$invalidate(6, value);
	}

	function input_binding_14($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_input_handler_13() {
		value = this.value;
		$$invalidate(6, value);
	}

	function input_binding_15($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function input_input_handler_14() {
		value = this.value;
		$$invalidate(6, value);
	}

	function input_binding_16($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function textarea_input_handler() {
		value = this.value;
		$$invalidate(6, value);
	}

	function textarea_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	function select_change_handler() {
		value = select_value(this);
		$$invalidate(6, value);
	}

	function select_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inner = $$value;
			$$invalidate(5, inner);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(22, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(7, className = $$new_props.class);
		if ('bsSize' in $$new_props) $$invalidate(0, bsSize = $$new_props.bsSize);
		if ('checked' in $$new_props) $$invalidate(2, checked = $$new_props.checked);
		if ('color' in $$new_props) $$invalidate(23, color = $$new_props.color);
		if ('disabled' in $$new_props) $$invalidate(8, disabled = $$new_props.disabled);
		if ('feedback' in $$new_props) $$invalidate(9, feedback = $$new_props.feedback);
		if ('files' in $$new_props) $$invalidate(3, files = $$new_props.files);
		if ('group' in $$new_props) $$invalidate(4, group = $$new_props.group);
		if ('inner' in $$new_props) $$invalidate(5, inner = $$new_props.inner);
		if ('invalid' in $$new_props) $$invalidate(10, invalid = $$new_props.invalid);
		if ('label' in $$new_props) $$invalidate(11, label = $$new_props.label);
		if ('multiple' in $$new_props) $$invalidate(12, multiple = $$new_props.multiple);
		if ('name' in $$new_props) $$invalidate(13, name = $$new_props.name);
		if ('placeholder' in $$new_props) $$invalidate(14, placeholder = $$new_props.placeholder);
		if ('plaintext' in $$new_props) $$invalidate(24, plaintext = $$new_props.plaintext);
		if ('readonly' in $$new_props) $$invalidate(15, readonly = $$new_props.readonly);
		if ('reverse' in $$new_props) $$invalidate(16, reverse = $$new_props.reverse);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('type' in $$new_props) $$invalidate(17, type = $$new_props.type);
		if ('valid' in $$new_props) $$invalidate(18, valid = $$new_props.valid);
		if ('value' in $$new_props) $$invalidate(6, value = $$new_props.value);
		if ('$$scope' in $$new_props) $$invalidate(210, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		FormCheck,
		FormFeedback,
		classnames,
		className,
		bsSize,
		checked,
		color,
		disabled,
		feedback,
		files,
		group,
		inner,
		invalid,
		label,
		multiple,
		name,
		placeholder,
		plaintext,
		readonly,
		reverse,
		size,
		type,
		valid,
		value,
		classes,
		tag,
		handleInput
	});

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(7, className = $$new_props.className);
		if ('bsSize' in $$props) $$invalidate(0, bsSize = $$new_props.bsSize);
		if ('checked' in $$props) $$invalidate(2, checked = $$new_props.checked);
		if ('color' in $$props) $$invalidate(23, color = $$new_props.color);
		if ('disabled' in $$props) $$invalidate(8, disabled = $$new_props.disabled);
		if ('feedback' in $$props) $$invalidate(9, feedback = $$new_props.feedback);
		if ('files' in $$props) $$invalidate(3, files = $$new_props.files);
		if ('group' in $$props) $$invalidate(4, group = $$new_props.group);
		if ('inner' in $$props) $$invalidate(5, inner = $$new_props.inner);
		if ('invalid' in $$props) $$invalidate(10, invalid = $$new_props.invalid);
		if ('label' in $$props) $$invalidate(11, label = $$new_props.label);
		if ('multiple' in $$props) $$invalidate(12, multiple = $$new_props.multiple);
		if ('name' in $$props) $$invalidate(13, name = $$new_props.name);
		if ('placeholder' in $$props) $$invalidate(14, placeholder = $$new_props.placeholder);
		if ('plaintext' in $$props) $$invalidate(24, plaintext = $$new_props.plaintext);
		if ('readonly' in $$props) $$invalidate(15, readonly = $$new_props.readonly);
		if ('reverse' in $$props) $$invalidate(16, reverse = $$new_props.reverse);
		if ('size' in $$props) $$invalidate(1, size = $$new_props.size);
		if ('type' in $$props) $$invalidate(17, type = $$new_props.type);
		if ('valid' in $$props) $$invalidate(18, valid = $$new_props.valid);
		if ('value' in $$props) $$invalidate(6, value = $$new_props.value);
		if ('classes' in $$props) $$invalidate(19, classes = $$new_props.classes);
		if ('tag' in $$props) $$invalidate(20, tag = $$new_props.tag);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*type, color, plaintext, size, className, invalid, valid, bsSize*/ 25560195) {
			{
				const isNotaNumber = new RegExp('\\D', 'g');
				let isBtn = false;
				let formControlClass = 'form-control';
				$$invalidate(20, tag = 'input');

				switch (type) {
					case 'color':
						formControlClass = `form-control form-control-color`;
						break;
					case 'range':
						formControlClass = 'form-range';
						break;
					case 'select':
						formControlClass = `form-select`;
						$$invalidate(20, tag = 'select');
						break;
					case 'textarea':
						$$invalidate(20, tag = 'textarea');
						break;
					case 'button':
					case 'reset':
					case 'submit':
						formControlClass = `btn btn-${color || 'secondary'}`;
						isBtn = true;
						break;
					case 'hidden':
					case 'image':
						formControlClass = undefined;
						break;
					default:
						formControlClass = 'form-control';
						$$invalidate(20, tag = 'input');
				}

				if (plaintext) {
					formControlClass = `${formControlClass}-plaintext`;
					$$invalidate(20, tag = 'input');
				}

				if (size && isNotaNumber.test(size)) {
					console.warn('Please use the prop "bsSize" instead of the "size" to bootstrap\'s input sizing.');
					$$invalidate(0, bsSize = size);
					$$invalidate(1, size = undefined);
				}

				$$invalidate(19, classes = classnames(className, formControlClass, {
					'is-invalid': invalid,
					'is-valid': valid,
					[`form-control-${bsSize}`]: bsSize && !isBtn,
					[`btn-${bsSize}`]: bsSize && isBtn
				}));
			}
		}
	};

	return [
		bsSize,
		size,
		checked,
		files,
		group,
		inner,
		value,
		className,
		disabled,
		feedback,
		invalid,
		label,
		multiple,
		name,
		placeholder,
		readonly,
		reverse,
		type,
		valid,
		classes,
		tag,
		handleInput,
		$$restProps,
		color,
		plaintext,
		slots,
		blur_handler,
		change_handler,
		focus_handler,
		input_handler,
		keydown_handler,
		keypress_handler,
		keyup_handler,
		blur_handler_1,
		change_handler_1,
		focus_handler_1,
		input_handler_1,
		keydown_handler_1,
		keypress_handler_1,
		keyup_handler_1,
		blur_handler_2,
		change_handler_2,
		focus_handler_2,
		input_handler_2,
		keydown_handler_2,
		keypress_handler_2,
		keyup_handler_2,
		blur_handler_3,
		change_handler_3,
		focus_handler_3,
		input_handler_3,
		keydown_handler_3,
		keypress_handler_3,
		keyup_handler_3,
		blur_handler_4,
		change_handler_4,
		focus_handler_4,
		input_handler_4,
		keydown_handler_4,
		keypress_handler_4,
		keyup_handler_4,
		blur_handler_6,
		change_handler_6,
		focus_handler_6,
		input_handler_6,
		keydown_handler_6,
		keypress_handler_6,
		keyup_handler_6,
		blur_handler_7,
		change_handler_7,
		focus_handler_7,
		input_handler_7,
		keydown_handler_7,
		keypress_handler_7,
		keyup_handler_7,
		blur_handler_8,
		change_handler_8,
		focus_handler_8,
		input_handler_8,
		keydown_handler_8,
		keypress_handler_8,
		keyup_handler_8,
		blur_handler_9,
		change_handler_9,
		focus_handler_9,
		input_handler_9,
		keydown_handler_9,
		keypress_handler_9,
		keyup_handler_9,
		blur_handler_10,
		change_handler_10,
		focus_handler_10,
		input_handler_10,
		keydown_handler_10,
		keypress_handler_10,
		keyup_handler_10,
		blur_handler_11,
		change_handler_11,
		focus_handler_11,
		input_handler_11,
		keydown_handler_11,
		keypress_handler_11,
		keyup_handler_11,
		blur_handler_12,
		change_handler_12,
		focus_handler_12,
		input_handler_12,
		keydown_handler_12,
		keypress_handler_12,
		keyup_handler_12,
		blur_handler_13,
		change_handler_13,
		focus_handler_13,
		input_handler_13,
		keydown_handler_13,
		keypress_handler_13,
		keyup_handler_13,
		blur_handler_14,
		change_handler_14,
		focus_handler_14,
		input_handler_14,
		keydown_handler_14,
		keypress_handler_14,
		keyup_handler_14,
		blur_handler_15,
		change_handler_15,
		focus_handler_15,
		input_handler_15,
		keydown_handler_15,
		keypress_handler_15,
		keyup_handler_15,
		blur_handler_16,
		change_handler_16,
		focus_handler_16,
		input_handler_16,
		keydown_handler_16,
		keypress_handler_16,
		keyup_handler_16,
		blur_handler_17,
		change_handler_17,
		focus_handler_17,
		input_handler_17,
		keydown_handler_17,
		keypress_handler_17,
		keyup_handler_17,
		blur_handler_18,
		focus_handler_18,
		keydown_handler_18,
		keypress_handler_18,
		keyup_handler_18,
		blur_handler_19,
		change_handler_18,
		focus_handler_19,
		input_handler_18,
		keydown_handler_19,
		keypress_handler_19,
		keyup_handler_19,
		blur_handler_20,
		change_handler_19,
		focus_handler_20,
		input_handler_19,
		input_input_handler,
		input_binding,
		input_input_handler_1,
		input_binding_1,
		input_input_handler_2,
		input_binding_2,
		input_input_handler_3,
		input_binding_3,
		input_change_handler,
		input_binding_4,
		formcheck_checked_binding,
		formcheck_inner_binding,
		formcheck_group_binding,
		formcheck_value_binding,
		blur_handler_5,
		change_handler_5,
		focus_handler_5,
		input_handler_5,
		keydown_handler_5,
		keypress_handler_5,
		keyup_handler_5,
		input_input_handler_4,
		input_binding_5,
		input_input_handler_5,
		input_binding_6,
		input_input_handler_6,
		input_binding_7,
		input_input_handler_7,
		input_binding_8,
		input_input_handler_8,
		input_binding_9,
		input_input_handler_9,
		input_binding_10,
		input_input_handler_10,
		input_binding_11,
		input_input_handler_11,
		input_binding_12,
		input_change_input_handler,
		input_binding_13,
		input_input_handler_12,
		input_binding_14,
		input_input_handler_13,
		input_binding_15,
		input_input_handler_14,
		input_binding_16,
		textarea_input_handler,
		textarea_binding,
		select_change_handler,
		select_binding,
		$$scope
	];
}

class Input extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$4,
			create_fragment$4,
			safe_not_equal,
			{
				class: 7,
				bsSize: 0,
				checked: 2,
				color: 23,
				disabled: 8,
				feedback: 9,
				files: 3,
				group: 4,
				inner: 5,
				invalid: 10,
				label: 11,
				multiple: 12,
				name: 13,
				placeholder: 14,
				plaintext: 24,
				readonly: 15,
				reverse: 16,
				size: 1,
				type: 17,
				valid: 18,
				value: 6
			},
			null,
			[-1, -1, -1, -1, -1, -1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Input",
			options,
			id: create_fragment$4.name
		});
	}

	get class() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bsSize() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bsSize(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get checked() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set checked(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get feedback() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set feedback(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get files() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set files(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get group() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set group(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get inner() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inner(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalid() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalid(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get multiple() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set multiple(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get placeholder() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placeholder(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get plaintext() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set plaintext(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get readonly() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set readonly(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get reverse() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set reverse(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get valid() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set valid(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/InputGroup.svelte generated by Svelte v3.59.2 */
const file$3 = "node_modules/sveltestrap/src/InputGroup.svelte";

function create_fragment$3(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let div_levels = [/*$$restProps*/ ctx[1], { class: /*classes*/ ctx[0] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			add_location(div, file$3, 14, 0, 243);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1],
				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let classes;
	const omit_props_names = ["class","size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('InputGroup', slots, ['default']);
	let { class: className = '' } = $$props;
	let { size = '' } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ('size' in $$new_props) $$invalidate(3, size = $$new_props.size);
		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({ classnames, className, size, classes });

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
		if ('size' in $$props) $$invalidate(3, size = $$new_props.size);
		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className, size*/ 12) {
			$$invalidate(0, classes = classnames(className, 'input-group', size ? `input-group-${size}` : null));
		}
	};

	return [classes, $$restProps, className, size, $$scope, slots];
}

class InputGroup extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { class: 2, size: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "InputGroup",
			options,
			id: create_fragment$3.name
		});
	}

	get class() {
		throw new Error("<InputGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<InputGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<InputGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<InputGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/sveltestrap/src/InputGroupText.svelte generated by Svelte v3.59.2 */
const file$2 = "node_modules/sveltestrap/src/InputGroupText.svelte";

function create_fragment$2(ctx) {
	let span;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	let span_levels = [/*$$restProps*/ ctx[1], { class: /*classes*/ ctx[0] }];
	let span_data = {};

	for (let i = 0; i < span_levels.length; i += 1) {
		span_data = assign(span_data, span_levels[i]);
	}

	const block = {
		c: function create() {
			span = element("span");
			if (default_slot) default_slot.c();
			set_attributes(span, span_data);
			add_location(span, file$2, 9, 0, 171);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(span, span_data = get_spread_update(span_levels, [
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1],
				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let classes;
	const omit_props_names = ["class"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('InputGroupText', slots, ['default']);
	let { class: className = '' } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({ classnames, className, classes });

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*className*/ 4) {
			$$invalidate(0, classes = classnames(className, 'input-group-text'));
		}
	};

	return [classes, $$restProps, className, $$scope, slots];
}

class InputGroupText extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { class: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "InputGroupText",
			options,
			id: create_fragment$2.name
		});
	}

	get class() {
		throw new Error("<InputGroupText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<InputGroupText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/UserRegisterForm.svelte generated by Svelte v3.59.2 */

const { Error: Error_1, console: console_1 } = globals;
const file$1 = "src/components/UserRegisterForm.svelte";

// (52:16) <InputGroupText>
function create_default_slot_8(ctx) {
	let i;

	const block = {
		c: function create() {
			i = element("i");
			attr_dev(i, "class", "fas fa-envelope");
			add_location(i, file$1, 52, 20, 1491);
		},
		m: function mount(target, anchor) {
			insert_dev(target, i, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(i);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(52:16) <InputGroupText>",
		ctx
	});

	return block;
}

// (51:12) <InputGroup>
function create_default_slot_7(ctx) {
	let inputgrouptext;
	let t;
	let input;
	let updating_value;
	let current;

	inputgrouptext = new InputGroupText({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function input_value_binding(value) {
		/*input_value_binding*/ ctx[6](value);
	}

	let input_props = {
		type: "email",
		id: "email",
		name: "email",
		placeholder: "メールアドレスを入力",
		required: true
	};

	if (/*email*/ ctx[1] !== void 0) {
		input_props.value = /*email*/ ctx[1];
	}

	input = new Input({ props: input_props, $$inline: true });
	binding_callbacks.push(() => bind(input, 'value', input_value_binding));

	const block = {
		c: function create() {
			create_component(inputgrouptext.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputgrouptext, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputgrouptext_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				inputgrouptext_changes.$$scope = { dirty, ctx };
			}

			inputgrouptext.$set(inputgrouptext_changes);
			const input_changes = {};

			if (!updating_value && dirty & /*email*/ 2) {
				updating_value = true;
				input_changes.value = /*email*/ ctx[1];
				add_flush_callback(() => updating_value = false);
			}

			input.$set(input_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputgrouptext.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputgrouptext.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputgrouptext, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(51:12) <InputGroup>",
		ctx
	});

	return block;
}

// (77:16) <InputGroupText>
function create_default_slot_6(ctx) {
	let i;

	const block = {
		c: function create() {
			i = element("i");
			attr_dev(i, "class", "fas fa-lock");
			add_location(i, file$1, 77, 20, 2288);
		},
		m: function mount(target, anchor) {
			insert_dev(target, i, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(i);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(77:16) <InputGroupText>",
		ctx
	});

	return block;
}

// (76:12) <InputGroup>
function create_default_slot_5(ctx) {
	let inputgrouptext;
	let t;
	let input;
	let updating_value;
	let current;

	inputgrouptext = new InputGroupText({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function input_value_binding_1(value) {
		/*input_value_binding_1*/ ctx[7](value);
	}

	let input_props = {
		type: "password",
		id: "password",
		name: "password",
		placeholder: "パスワードを入力",
		required: true
	};

	if (/*password*/ ctx[2] !== void 0) {
		input_props.value = /*password*/ ctx[2];
	}

	input = new Input({ props: input_props, $$inline: true });
	binding_callbacks.push(() => bind(input, 'value', input_value_binding_1));

	const block = {
		c: function create() {
			create_component(inputgrouptext.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputgrouptext, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputgrouptext_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				inputgrouptext_changes.$$scope = { dirty, ctx };
			}

			inputgrouptext.$set(inputgrouptext_changes);
			const input_changes = {};

			if (!updating_value && dirty & /*password*/ 4) {
				updating_value = true;
				input_changes.value = /*password*/ ctx[2];
				add_flush_callback(() => updating_value = false);
			}

			input.$set(input_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputgrouptext.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputgrouptext.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputgrouptext, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(76:12) <InputGroup>",
		ctx
	});

	return block;
}

// (103:16) <InputGroupText>
function create_default_slot_4(ctx) {
	let i;

	const block = {
		c: function create() {
			i = element("i");
			attr_dev(i, "class", "fas fa-user");
			add_location(i, file$1, 103, 20, 3100);
		},
		m: function mount(target, anchor) {
			insert_dev(target, i, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(i);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(103:16) <InputGroupText>",
		ctx
	});

	return block;
}

// (102:12) <InputGroup>
function create_default_slot_3$1(ctx) {
	let inputgrouptext;
	let t;
	let input;
	let updating_value;
	let current;

	inputgrouptext = new InputGroupText({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function input_value_binding_2(value) {
		/*input_value_binding_2*/ ctx[8](value);
	}

	let input_props = {
		type: "text",
		id: "username",
		name: "username",
		placeholder: "ユーザ名を入力",
		required: true
	};

	if (/*username*/ ctx[3] !== void 0) {
		input_props.value = /*username*/ ctx[3];
	}

	input = new Input({ props: input_props, $$inline: true });
	binding_callbacks.push(() => bind(input, 'value', input_value_binding_2));

	const block = {
		c: function create() {
			create_component(inputgrouptext.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputgrouptext, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputgrouptext_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				inputgrouptext_changes.$$scope = { dirty, ctx };
			}

			inputgrouptext.$set(inputgrouptext_changes);
			const input_changes = {};

			if (!updating_value && dirty & /*username*/ 8) {
				updating_value = true;
				input_changes.value = /*username*/ ctx[3];
				add_flush_callback(() => updating_value = false);
			}

			input.$set(input_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputgrouptext.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputgrouptext.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputgrouptext, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$1.name,
		type: "slot",
		source: "(102:12) <InputGroup>",
		ctx
	});

	return block;
}

// (127:16) <InputGroupText>
function create_default_slot_2$1(ctx) {
	let i;

	const block = {
		c: function create() {
			i = element("i");
			attr_dev(i, "class", "fas fa-comment");
			add_location(i, file$1, 127, 20, 3809);
		},
		m: function mount(target, anchor) {
			insert_dev(target, i, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(i);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$1.name,
		type: "slot",
		source: "(127:16) <InputGroupText>",
		ctx
	});

	return block;
}

// (126:12) <InputGroup>
function create_default_slot_1$1(ctx) {
	let inputgrouptext;
	let t;
	let input;
	let updating_value;
	let current;

	inputgrouptext = new InputGroupText({
			props: {
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function input_value_binding_3(value) {
		/*input_value_binding_3*/ ctx[9](value);
	}

	let input_props = {
		type: "textarea",
		id: "note",
		name: "note",
		placeholder: "備考を入力"
	};

	if (/*note*/ ctx[4] !== void 0) {
		input_props.value = /*note*/ ctx[4];
	}

	input = new Input({ props: input_props, $$inline: true });
	binding_callbacks.push(() => bind(input, 'value', input_value_binding_3));

	const block = {
		c: function create() {
			create_component(inputgrouptext.$$.fragment);
			t = space();
			create_component(input.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputgrouptext, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputgrouptext_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				inputgrouptext_changes.$$scope = { dirty, ctx };
			}

			inputgrouptext.$set(inputgrouptext_changes);
			const input_changes = {};

			if (!updating_value && dirty & /*note*/ 16) {
				updating_value = true;
				input_changes.value = /*note*/ ctx[4];
				add_flush_callback(() => updating_value = false);
			}

			input.$set(input_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputgrouptext.$$.fragment, local);
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputgrouptext.$$.fragment, local);
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputgrouptext, detaching);
			if (detaching) detach_dev(t);
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(126:12) <InputGroup>",
		ctx
	});

	return block;
}

// (142:12) <Button                 type="submit"                 color="primary"                 block="true"                 class="register-btn">
function create_default_slot$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("登録");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(142:12) <Button                 type=\\\"submit\\\"                 color=\\\"primary\\\"                 block=\\\"true\\\"                 class=\\\"register-btn\\\">",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div5;
	let h2;
	let t1;
	let form;
	let div0;
	let label0;
	let t3;
	let inputgroup0;
	let t4;
	let div1;
	let label1;
	let t6;
	let inputgroup1;
	let t7;
	let div2;
	let label2;
	let t9;
	let inputgroup2;
	let t10;
	let div3;
	let label3;
	let t12;
	let inputgroup3;
	let t13;
	let div4;
	let button;
	let current;
	let mounted;
	let dispose;

	inputgroup0 = new InputGroup({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	inputgroup1 = new InputGroup({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	inputgroup2 = new InputGroup({
			props: {
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	inputgroup3 = new InputGroup({
			props: {
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button = new Button({
			props: {
				type: "submit",
				color: "primary",
				block: "true",
				class: "register-btn",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div5 = element("div");
			h2 = element("h2");
			h2.textContent = "ユーザ登録";
			t1 = space();
			form = element("form");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = "メールアドレス";
			t3 = space();
			create_component(inputgroup0.$$.fragment);
			t4 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = "パスワード";
			t6 = space();
			create_component(inputgroup1.$$.fragment);
			t7 = space();
			div2 = element("div");
			label2 = element("label");
			label2.textContent = "ユーザ名";
			t9 = space();
			create_component(inputgroup2.$$.fragment);
			t10 = space();
			div3 = element("div");
			label3 = element("label");
			label3.textContent = "備考";
			t12 = space();
			create_component(inputgroup3.$$.fragment);
			t13 = space();
			div4 = element("div");
			create_component(button.$$.fragment);
			attr_dev(h2, "class", "svelte-6k34py");
			add_location(h2, file$1, 41, 4, 1190);
			attr_dev(label0, "for", "email");
			attr_dev(label0, "class", "svelte-6k34py");
			add_location(label0, file$1, 49, 12, 1378);
			attr_dev(div0, "class", "form-group svelte-6k34py");
			add_location(div0, file$1, 48, 8, 1341);
			attr_dev(label1, "for", "password");
			attr_dev(label1, "class", "svelte-6k34py");
			add_location(label1, file$1, 74, 12, 2174);
			attr_dev(div1, "class", "form-group svelte-6k34py");
			add_location(div1, file$1, 73, 8, 2137);
			attr_dev(label2, "for", "username");
			attr_dev(label2, "class", "svelte-6k34py");
			add_location(label2, file$1, 100, 12, 2987);
			attr_dev(div2, "class", "form-group svelte-6k34py");
			add_location(div2, file$1, 99, 8, 2950);
			attr_dev(label3, "for", "note");
			attr_dev(label3, "class", "svelte-6k34py");
			add_location(label3, file$1, 124, 12, 3702);
			attr_dev(div3, "class", "form-group svelte-6k34py");
			add_location(div3, file$1, 123, 8, 3665);
			attr_dev(div4, "class", "button-group svelte-6k34py");
			add_location(div4, file$1, 140, 8, 4225);
			attr_dev(form, "action", /*register_url*/ ctx[0]);
			attr_dev(form, "method", "post");
			attr_dev(form, "id", "register-form");
			add_location(form, file$1, 42, 4, 1209);
			attr_dev(div5, "class", "registration-container svelte-6k34py");
			add_location(div5, file$1, 40, 0, 1149);
		},
		l: function claim(nodes) {
			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div5, anchor);
			append_dev(div5, h2);
			append_dev(div5, t1);
			append_dev(div5, form);
			append_dev(form, div0);
			append_dev(div0, label0);
			append_dev(div0, t3);
			mount_component(inputgroup0, div0, null);
			append_dev(form, t4);
			append_dev(form, div1);
			append_dev(div1, label1);
			append_dev(div1, t6);
			mount_component(inputgroup1, div1, null);
			append_dev(form, t7);
			append_dev(form, div2);
			append_dev(div2, label2);
			append_dev(div2, t9);
			mount_component(inputgroup2, div2, null);
			append_dev(form, t10);
			append_dev(form, div3);
			append_dev(div3, label3);
			append_dev(div3, t12);
			mount_component(inputgroup3, div3, null);
			append_dev(form, t13);
			append_dev(form, div4);
			mount_component(button, div4, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(form, "submit", /*handleSubmit*/ ctx[5], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			const inputgroup0_changes = {};

			if (dirty & /*$$scope, email*/ 1026) {
				inputgroup0_changes.$$scope = { dirty, ctx };
			}

			inputgroup0.$set(inputgroup0_changes);
			const inputgroup1_changes = {};

			if (dirty & /*$$scope, password*/ 1028) {
				inputgroup1_changes.$$scope = { dirty, ctx };
			}

			inputgroup1.$set(inputgroup1_changes);
			const inputgroup2_changes = {};

			if (dirty & /*$$scope, username*/ 1032) {
				inputgroup2_changes.$$scope = { dirty, ctx };
			}

			inputgroup2.$set(inputgroup2_changes);
			const inputgroup3_changes = {};

			if (dirty & /*$$scope, note*/ 1040) {
				inputgroup3_changes.$$scope = { dirty, ctx };
			}

			inputgroup3.$set(inputgroup3_changes);
			const button_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);

			if (!current || dirty & /*register_url*/ 1) {
				attr_dev(form, "action", /*register_url*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputgroup0.$$.fragment, local);
			transition_in(inputgroup1.$$.fragment, local);
			transition_in(inputgroup2.$$.fragment, local);
			transition_in(inputgroup3.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputgroup0.$$.fragment, local);
			transition_out(inputgroup1.$$.fragment, local);
			transition_out(inputgroup2.$$.fragment, local);
			transition_out(inputgroup3.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div5);
			destroy_component(inputgroup0);
			destroy_component(inputgroup1);
			destroy_component(inputgroup2);
			destroy_component(inputgroup3);
			destroy_component(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('UserRegisterForm', slots, []);
	let { register_url } = $$props;
	let email = "";
	let password = "";
	let username = "";
	let note = "";

	async function handleSubmit(event) {
		event.preventDefault(); // フォームのデフォルトの送信を防ぎます

		// POSTリクエストの設定
		const requestOptions = {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({ email, password, username, note })
		};

		try {
			const response = await fetch(register_url, requestOptions);

			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`);
			}

			// 成功した後の処理をここに書く
			registered.set(true);
		} catch(error) {
			console.error("Error:", error);
		}
	}

	$$self.$$.on_mount.push(function () {
		if (register_url === undefined && !('register_url' in $$props || $$self.$$.bound[$$self.$$.props['register_url']])) {
			console_1.warn("<UserRegisterForm> was created without expected prop 'register_url'");
		}
	});

	const writable_props = ['register_url'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<UserRegisterForm> was created with unknown prop '${key}'`);
	});

	function input_value_binding(value) {
		email = value;
		$$invalidate(1, email);
	}

	function input_value_binding_1(value) {
		password = value;
		$$invalidate(2, password);
	}

	function input_value_binding_2(value) {
		username = value;
		$$invalidate(3, username);
	}

	function input_value_binding_3(value) {
		note = value;
		$$invalidate(4, note);
	}

	$$self.$$set = $$props => {
		if ('register_url' in $$props) $$invalidate(0, register_url = $$props.register_url);
	};

	$$self.$capture_state = () => ({
		Button,
		Input,
		InputGroup,
		InputGroupText,
		registered,
		register_url,
		email,
		password,
		username,
		note,
		handleSubmit
	});

	$$self.$inject_state = $$props => {
		if ('register_url' in $$props) $$invalidate(0, register_url = $$props.register_url);
		if ('email' in $$props) $$invalidate(1, email = $$props.email);
		if ('password' in $$props) $$invalidate(2, password = $$props.password);
		if ('username' in $$props) $$invalidate(3, username = $$props.username);
		if ('note' in $$props) $$invalidate(4, note = $$props.note);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		register_url,
		email,
		password,
		username,
		note,
		handleSubmit,
		input_value_binding,
		input_value_binding_1,
		input_value_binding_2,
		input_value_binding_3
	];
}

class UserRegisterForm extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { register_url: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "UserRegisterForm",
			options,
			id: create_fragment$1.name
		});
	}

	get register_url() {
		throw new Error_1("<UserRegisterForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set register_url(value) {
		throw new Error_1("<UserRegisterForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/UserRegister.svelte generated by Svelte v3.59.2 */
const file = "src/UserRegister.svelte";

// (17:1) <ModalHeader>
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("ユーザ登録完了");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(17:1) <ModalHeader>",
		ctx
	});

	return block;
}

// (20:2) <Button color="primary" block="true" on:click={toLoginPage}>
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("OK");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(20:2) <Button color=\\\"primary\\\" block=\\\"true\\\" on:click={toLoginPage}>",
		ctx
	});

	return block;
}

// (18:1) <ModalBody class="modal-body">
function create_default_slot_1(ctx) {
	let h5;
	let t1;
	let button;
	let current;

	button = new Button({
			props: {
				color: "primary",
				block: "true",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", toLoginPage);

	const block = {
		c: function create() {
			h5 = element("h5");
			h5.textContent = "ログイン画面に遷移します。";
			t1 = space();
			create_component(button.$$.fragment);
			add_location(h5, file, 18, 2, 494);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h5, anchor);
			insert_dev(target, t1, anchor);
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 4) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h5);
			if (detaching) detach_dev(t1);
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(18:1) <ModalBody class=\\\"modal-body\\\">",
		ctx
	});

	return block;
}

// (16:0) <Modal isOpen={isModalOpen} size="sm">
function create_default_slot(ctx) {
	let modalheader;
	let t;
	let modalbody;
	let current;

	modalheader = new ModalHeader({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	modalbody = new ModalBody({
			props: {
				class: "modal-body",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(modalheader.$$.fragment);
			t = space();
			create_component(modalbody.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(modalheader, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(modalbody, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const modalheader_changes = {};

			if (dirty & /*$$scope*/ 4) {
				modalheader_changes.$$scope = { dirty, ctx };
			}

			modalheader.$set(modalheader_changes);
			const modalbody_changes = {};

			if (dirty & /*$$scope*/ 4) {
				modalbody_changes.$$scope = { dirty, ctx };
			}

			modalbody.$set(modalbody_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(modalheader.$$.fragment, local);
			transition_in(modalbody.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(modalheader.$$.fragment, local);
			transition_out(modalbody.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(modalheader, detaching);
			if (detaching) detach_dev(t);
			destroy_component(modalbody, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(16:0) <Modal isOpen={isModalOpen} size=\\\"sm\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let userregisterform;
	let t;
	let modal;
	let current;

	userregisterform = new UserRegisterForm({
			props: { register_url: "/register" },
			$$inline: true
		});

	modal = new Modal({
			props: {
				isOpen: /*isModalOpen*/ ctx[0],
				size: "sm",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(userregisterform.$$.fragment);
			t = space();
			create_component(modal.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(userregisterform, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(modal, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const modal_changes = {};
			if (dirty & /*isModalOpen*/ 1) modal_changes.isOpen = /*isModalOpen*/ ctx[0];

			if (dirty & /*$$scope*/ 4) {
				modal_changes.$$scope = { dirty, ctx };
			}

			modal.$set(modal_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(userregisterform.$$.fragment, local);
			transition_in(modal.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(userregisterform.$$.fragment, local);
			transition_out(modal.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(userregisterform, detaching);
			if (detaching) detach_dev(t);
			destroy_component(modal, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function toLoginPage() {
	window.location.href = "/logout";
}

function instance($$self, $$props, $$invalidate) {
	let $registered;
	validate_store(registered, 'registered');
	component_subscribe($$self, registered, $$value => $$invalidate(1, $registered = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('UserRegister', slots, []);
	let isModalOpen = false;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UserRegister> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		Button,
		Modal,
		ModalBody,
		ModalHeader,
		UserRegisterForm,
		registered,
		isModalOpen,
		toLoginPage,
		$registered
	});

	$$self.$inject_state = $$props => {
		if ('isModalOpen' in $$props) $$invalidate(0, isModalOpen = $$props.isModalOpen);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$registered*/ 2) {
			$$invalidate(0, isModalOpen = $registered);
		}
	};

	return [isModalOpen, $registered];
}

class UserRegister extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "UserRegister",
			options,
			id: create_fragment.name
		});
	}
}

const app = new UserRegister({
	target: document.body,
});

export { app as default };
//# sourceMappingURL=userRegister.js.map
